"""The root mutation type for the AdminIdentity domain"""
type Mutation {
  """Nothing to see here, just a workaround for Apollo Server"""
  _makeEmpty(id: String): String

  """Create a new partner"""
  createPartner(input: PartnerCreateInput!): Partner
}

type PageInfo {
  """The cursor to use when paginating forwards."""
  endCursor: String

  """The cursor to use when paginating backwards."""
  startCursor: String
}

"""
Represents a Partner, the parent to an App, and the parent most component for Development
"""
type Partner {
  createdAt: String!
  description: String
  name: String!
  ownerUserName: String!
  partnerId: ID!
  updatedAt: String!

  """Return the users associated with this partner"""
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): UserConnection!
}

type PartnerConnection {
  edges: [PartnerEdge]
  nodes: [Partner]
  pageInfo: PageInfo!
}

"""The necessary fields in order to create a new partner"""
input PartnerCreateInput {
  description: String
  name: String!
}

type PartnerEdge {
  node: Partner
}

"""The root query type for the AdminIdentity domain"""
type Query {
  """Nothing to see here, just a workaround for Apollo Server"""
  _empty: String

  """Get the logged in User"""
  me: User

  """Get a single partner by PartnerId"""
  partner(partnerId: ID!): Partner

  """Get a list of partners"""
  partners(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): PartnerConnection!
}

"""Type representing a User, or human entity"""
type User {
  address: String

  """
  End-User's birthday, represented as an ISO 8601:2004 YYYY-MM-DD format. The
  year MAY be 0000, indicating that it is omitted. To represent only the year,
  YYYY format is allowed. Note that depending on the underlying platform's date
  related function, providing just year can result in varying month and day, so
  the implementers need to take this factor into account to correctly process the dates.
  """
  birthdate: String
  createdAt: String
  email: String!

  """string of true or false"""
  emailVerified: String
  familyName: String
  gender: String
  givenName: String

  """String representing the User's locale, i.e. 'en-us'"""
  locale: String

  """
  End-User's preferred telephone number. E.164 [E.164] is RECOMMENDED as the
  format of this Claim, for example, +1 (425) 555-1212 or +56 (2) 687 2400. If
  the phone number contains an extension, it is RECOMMENDED that the extension
  be represented using the RFC 3966 [RFC3966] extension syntax, for example, +1
  (604) 555-1234;ext=5678.
  """
  phone: String

  """string of true or false"""
  phoneNumberVerified: String

  """
  URL of the End-User's profile picture. This URL MUST refer to an image file
  (for example, a PNG, JPEG, or GIF image file), rather than to a Web page
  containing an image. Note that this URL SHOULD specifically reference a
  profile photo of the End-User suitable for displaying when describing the
  End-User, rather than an arbitrary photo taken by the End-User.
  """
  picture: String

  """
  URL of the End-User's profile page. The contents of this Web page SHOULD be about the End-User.
  """
  profile: String

  """Same as userName"""
  sub: String!
  updatedAt: String
  userName: ID!

  """
  URL of the End-User's Web page or blog. This Web page SHOULD contain
  information published by the End-User or an organization that the End-User is
  affiliated with.
  """
  website: String

  """
  Timezone - String from zoneinfo time zone database representing the End-User's
  time zone. For example, Europe/Paris or America/Los_Angeles.
  """
  zoneinfo: String
}

type UserConnection {
  edges: [UserEdge]
  nodes: [User]
  pageInfo: PageInfo!
}

type UserEdge {
  node: User
}
