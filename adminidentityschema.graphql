"""
Represents a App, which are machine users that perform a small context, unified set of tasks
"""
type App {
  appClientIds: [ID!]!
  appId: ID!
  appType: AppType!
  createdAt: String!

  """
  Short description of the app
  Limited to 8000 characters
  """
  description: String

  """
  The name of the app
  Limited to 128 characters
  """
  name: String!

  """
  Get the partner this app belongs to.
              
  Requires the partner/read scope on the associated AdminIdentity.
  """
  partner: Partner
  partnerId: ID!
  requestedScopes: [String]
  status: AppStatus!
  updatedAt: String!
  updatedBy: ID!
}

"""The output from creating or resetting client secrets"""
type AppClientResponse {
  appClientId: ID!
  appSecret: String!
}

"""Paginate through Apps"""
type AppConnection {
  edges: [AppEdge]
  nodes: [App]
  pageInfo: PageInfo!
}

"""The necessary fields in order to create a new app"""
input AppCreateInput {
  appType: AppType!

  """
  Short description of the app
  Limited to 8000 characters
  """
  description: String

  """
  The name of the app
  Limited to 128 characters
  """
  name: String!
  partnerId: ID!
  requestedScopes: [String]
  status: AppStatus!
}

"""The output when creating an App"""
type AppCreateResponse {
  app: App!
  appClients: [AppClientResponse!]!
}

"""One edge producing one App node"""
type AppEdge {
  node: App
}

"""What stage and availability the app is in"""
enum AppStatus {
  """The app is in the process of being created"""
  DRAFT

  """The app is available to install, but only through shared links"""
  PRIVATE

  """The app is available to install, and is searchable/discoverable"""
  PUBLIC
}

"""
This is the primary determination of which permission scopes can be requested.
An app cannot be more than one of these.
If something cross domain needs to exist, it should be two apps and they can communicate.
"""
enum AppType {
  DEMANDHQAPP
  STOREFRONTAPP
  SUPPLIERAPP
}

"""The possible fields in order to update an existing app"""
input AppUpdateInput {
  appId: ID!

  """
  Short description of the app
  Limited to 8000 characters
  """
  description: String

  """
  The name of the app
  Limited to 128 characters
  """
  name: String
  requestedScopes: [String]
  status: AppStatus
}

"""A date in ISO 8601 format"""
scalar Date

"""The root mutation type for the AdminIdentity domain"""
type Mutation {
  """Nothing to see here, just a workaround for Apollo Server"""
  _makeEmpty(id: String): String

  """Create a new App"""
  createApp(input: AppCreateInput!): AppCreateResponse!

  """Create a new partner"""
  createPartner(input: PartnerCreateInput!): Partner!

  """
  Create a new PartnerIdentity (give an Identity permission to a Partner)
  """
  createPartnerIdentity(input: PartnerIdentityCreateInput!): PartnerIdentity!

  """Delete a PartnerIdentity (remove Identity's permissions to a Partner)"""
  deletePartnerIdentity(identityId: ID!, partnerId: ID!): PartnerIdentityDeleteResponse!

  """Invite a new User to Resonance"""
  inviteUser(email: String!): User!

  """Update an existing App"""
  updateApp(input: AppUpdateInput!): App!

  """Update an existing partner"""
  updatePartner(input: PartnerUpdateInput!): Partner!

  """
  Update a PartnerIdentity (give an Identity more or less permissions to a Partner)
  """
  updatePartnerIdentity(input: PartnerIdentityUpdateInput!): PartnerIdentity!

  """Update an existing User"""
  updateUser(input: UserUpdateInput!): User!

  """Update the status of a UserNotification"""
  updateUserNotificationStatus(input: UserNotificationUpdateStatusInput!): UserNotification!
}

"""Should this notification be delivered outside the portal?"""
enum NotificationExternalDeliveryType {
  EMAIL
  SMS
}

"""Denotes the tone of the message, may affect display"""
enum NotificationSentiment {
  NEGATIVE
  NEUTRAL
  POSITIVE
  SEMINEGATIVE
}

"""Denotes how urgent and whether the Notification is archived"""
enum NotificationStatus {
  ARCHIVED
  STANDARD
  URGENT
}

"""Information on Pagination"""
type PageInfo {
  """
  The cursor to use when paginating forwards (using first/after). Will always be
  populated regardless of if a next page exists.
  """
  endCursor: String

  """
  Whether or not using the endCursor will result in more results. Always
  populated, but will always be false when paginating using last/before.
  """
  hasNextPage: Boolean!

  """
  Whether or not using the startCursor will result in more results. Always
  populated, but will always be false when paginating using first/after.
  """
  hasPreviousPage: Boolean!

  """
  The cursor to use when paginating backwards (using last/before). Will always
  be populated regardless of if a previous page exists
  """
  startCursor: String
}

"""
Represents a Partner, the parent to an App, and the parent most component for Development
"""
type Partner {
  """Get an App by ID"""
  app(appId: ID!): App

  """Get a list of Apps for a Partner"""
  apps(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): AppConnection!
  createdAt: Date!

  """
  Description of the partner
  Limited to 8000 characters
  """
  description: String

  """
  The name of the partner
  Limited to 128 characters
  """
  name: String!

  """Represents the users to be notified for certain events"""
  notificationUserNames: PartnerNotificationUserNames

  """Get the PublicIdentity of the owner for a given Partner"""
  ownerUser: PublicIdentity
  ownerUserName: String!
  partnerId: ID!

  """Return the identities' permissions associated with this partner"""
  partnerIdentities(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): PartnerIdentityConnection!

  """Return a single identity's permissions associated with this partner"""
  partnerIdentity(identityId: ID!): PartnerIdentity
  updatedAt: Date!
  updatedBy: ID!
}

"""Paginate through Partners"""
type PartnerConnection {
  edges: [PartnerEdge]!
  nodes: [Partner]!
  pageInfo: PageInfo!
}

"""The necessary fields in order to create a new partner"""
input PartnerCreateInput {
  """
  Description of the partner
  Limited to 8000 characters
  """
  description: String

  """
  The name of the partner
  Limited to 128 characters
  """
  name: String!
}

"""One edge producing one Partner node"""
type PartnerEdge {
  node: Partner
}

"""
Type representing a PartnerIdentity, the permissions given to a User for a Partner
"""
type PartnerIdentity {
  """The identityId these permissions pertain to"""
  identityId: ID!

  """Unlikely to be used, unless we have Partner Apps"""
  identityParentEntityId: ID

  """The type of identity an identityId refers to"""
  identityType: ResonanceIdentityType!

  """The ID of the Partner this permission pertains to"""
  partnerId: ID!

  """Object representing exactly what permissions are given"""
  permissions: PartnerIdentityPermissions!

  """Get a PublicIdentity for a given PartnerIdentity"""
  publicIdentity: PublicIdentity

  """The identity to last update this entity"""
  updatedBy: ID!
}

"""Paginate through PartnerIdentities"""
type PartnerIdentityConnection {
  edges: [PartnerIdentityEdge]!
  nodes: [PartnerIdentity]!
  pageInfo: PageInfo!
}

"""
Input object to create a PartnerIdentity, the permissions given to an Identity for a Partner
"""
input PartnerIdentityCreateInput {
  """The identityId these permissions pertain to"""
  identityId: ID!

  """The type of identity an identityId refers to"""
  identityType: ResonanceIdentityType!

  """The ID of the Partner this permission pertains to"""
  partnerId: ID!

  """Object representing exactly what permissions are given"""
  permissions: PartnerIdentityPermissionsInput!
}

"""The output when a PartnerIdentity is deleted"""
type PartnerIdentityDeleteResponse {
  deletedId: PartnerIdentityDeletedId
}

"""Object representing a deleted PartnerIdentity Id"""
type PartnerIdentityDeletedId {
  identityId: ID!
  partnerId: ID!
}

"""One edge producing one PartnerIdentity node"""
type PartnerIdentityEdge {
  node: PartnerIdentity
}

"""Object representing exactly what permissions are given"""
type PartnerIdentityPermissions {
  """Roles are groups of permission scopes, for ease of assigning"""
  roles: [PartnerRole]!

  """
  Scopes are individual permissions representing a single item and action, in all lowercase, i.e. partneridentity/write
  """
  scopes: [String]!
}

"""Input object representing exactly what permissions are given"""
input PartnerIdentityPermissionsInput {
  """Roles are groups of permission scopes, for ease of assigning"""
  roles: [PartnerRole]!

  """
  Scopes are individual permissions representing a single item and action, in all lowercase, i.e. partneridentity/write
  """
  scopes: [String]!
}

"""
Input object to update a PartnerIdentity, the permissions given to an Identity for a Partner
"""
input PartnerIdentityUpdateInput {
  """The identityId these permissions pertain to"""
  identityId: ID!

  """The ID of the Partner this permission pertains to"""
  partnerId: ID!

  """Object representing exactly what permissions are given"""
  permissions: PartnerIdentityPermissionsInput
}

"""Represents the users to be notified for certain events"""
type PartnerNotificationUserNames {
  apps: [String]
}

"""The fields to notify users for certain events"""
input PartnerNotificationUserNamesInput {
  apps: [String]
}

"""Roles are groups of permission scopes, for ease of assigning"""
enum PartnerRole {
  """ADMIN represents all possible scopes being given write permission"""
  ADMIN
}

"""The possible fields in order to update an existing partner"""
input PartnerUpdateInput {
  """
  Description of the partner
  Limited to 8000 characters
  """
  description: String

  """
  The name of the partner
  Limited to 128 characters
  """
  name: String

  """Represents the users to be notified for certain events"""
  notificationUserNames: PartnerNotificationUserNamesInput
  ownerUserName: String
  partnerId: ID!
}

"""
Represents an App, but the fields that can be publicly consumed without scopes
"""
type PublicApp {
  appClientIds: [ID!]!
  appId: ID!
  appType: AppType!
  description: String
  name: String!
  partnerId: ID!
  requestedScopes: [String]
  status: AppStatus!
}

"""Paginate through PublicApps"""
type PublicAppConnection {
  edges: [PublicAppEdge]!
  nodes: [PublicApp]!
  pageInfo: PageInfo!
}

"""One edge producing one PublicApp node"""
type PublicAppEdge {
  node: PublicApp
}

"""
This type is returned on routes with no permissions attached to protect
Personally Identifiable Information, but still provide minimal data.
Can be a User or Identity.
"""
type PublicIdentity {
  displayName: String!

  """A userName or appClientId"""
  identityId: ID!

  """
  The parent entityId of the identity.
  At time of writing, this is only used for AppClients, and is populated with the AppId.
  """
  identityParentEntityId: ID
}

"""Paginate through PublicIdentities"""
type PublicIdentityConnection {
  edges: [PublicIdentityEdge]
  nodes: [PublicIdentity]
  pageInfo: PageInfo!
}

"""One edge producing one PublicIdentity node"""
type PublicIdentityEdge {
  node: PublicIdentity
}

"""The root query type for the AdminIdentity domain"""
type Query {
  """Nothing to see here, just a workaround for Apollo Server"""
  _empty: String

  """Get an App by ID"""
  app(appId: ID!): App

  """Get the logged in User"""
  me: User

  """List your UserNotifications"""
  myNotifications(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    category: UserNotificationCategory

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    status: NotificationStatus
  ): UserNotificationConnection!

  """Get a Partner by ID"""
  partner(partnerId: ID!): Partner

  """Get a list of Partners"""
  partners(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): PartnerConnection!

  """Get a public app by id"""
  publicApp(appId: ID!): PublicApp

  """Get a list of PublicApps"""
  publicApps(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    appIds: [ID!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    partnerId: ID
  ): PublicAppConnection!

  """
  Get several public identities by their IDs.
  In the case of using the identityIds arg, will return in exact order of the
  IDs passed in, with null for missing identities.
  """
  publicIdentities(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int
    identityIds: [ID!]

    """Returns the last n elements from the list."""
    last: Int
  ): PublicIdentityConnection!

  """Get a PublicIdentity by ID"""
  publicIdentity(identityId: ID!): PublicIdentity

  """Given an email, returns PublicUser if the user exists. Exact match."""
  queryPublicIdentityByEmail(email: String!): PublicIdentity
}

"""The type of identity an identityId refers to"""
enum ResonanceIdentityType {
  APPCLIENT
  USER
}

"""Type representing a User, or human entity"""
type User {
  address: String

  """
  End-User's birthday, represented as an ISO 8601:2004 YYYY-MM-DD format. The
  year MAY be 0000, indicating that it is omitted. To represent only the year,
  YYYY format is allowed. Note that depending on the underlying platform's date
  related function, providing just year can result in varying month and day, so
  the implementers need to take this factor into account to correctly process the dates.
  """
  birthdate: String
  createdAt: String

  """
  Determined field based on other user information, represents the best name to use for the User.
  """
  displayName: String
  email: String!

  """string of true or false"""
  emailVerified: String
  familyName: String
  gender: String
  givenName: String

  """String representing the User's locale, i.e. 'en-us'"""
  locale: String

  """The display name for the User"""
  nickname: String

  """
  End-User's preferred telephone number. E.164 [E.164] is RECOMMENDED as the
  format of this Claim, for example, +1 (425) 555-1212 or +56 (2) 687 2400. If
  the phone number contains an extension, it is RECOMMENDED that the extension
  be represented using the RFC 3966 [RFC3966] extension syntax, for example, +1
  (604) 555-1234;ext=5678.
  """
  phone: String

  """string of true or false"""
  phoneNumberVerified: String

  """
  URL of the End-User's profile picture. This URL MUST refer to an image file
  (for example, a PNG, JPEG, or GIF image file), rather than to a Web page
  containing an image. Note that this URL SHOULD specifically reference a
  profile photo of the End-User suitable for displaying when describing the
  End-User, rather than an arbitrary photo taken by the End-User.
  """
  picture: String

  """
  URL of the End-User's profile page. The contents of this Web page SHOULD be about the End-User.
  """
  profile: String

  """A secondary ID, UUID"""
  sub: String!
  updatedAt: String
  userName: ID!

  """
  URL of the End-User's Web page or blog. This Web page SHOULD contain
  information published by the End-User or an organization that the End-User is
  affiliated with.
  """
  website: String

  """
  Timezone - String from zoneinfo time zone database representing the End-User's
  time zone. For example, Europe/Paris or America/Los_Angeles.
  """
  zoneinfo: String
}

"""Represents a notification specific to a User"""
type UserNotification {
  """These denote where the message is from and what it pertains to."""
  category: UserNotificationCategory!

  """
  The actual message. It's optional, and potentially only the subject is needed. Should be short.
  """
  content: String

  """ISO Date"""
  createdAt: String!

  """Identity who created the notification"""
  createdBy: ID!

  """Epoch date when this notification will expire"""
  expiresAt: Int

  """Should this notification be delivered outside the portal?"""
  externalDeliveries: [NotificationExternalDeliveryType]

  """Where the button in the notification should link to"""
  link: String

  """The sender of the notification can use this to reference it later"""
  senderReferenceKey: String

  """Denotes the tone of the message, may affect display"""
  sentiment: NotificationSentiment

  """Denotes how urgent and whether the Notification is archived"""
  status: NotificationStatus!

  """The subject of the notification, is required"""
  subject: String!

  """ISO Date"""
  updatedAt: String!

  """The last identity to alter this record"""
  updatedBy: ID!

  """The user this notification pertains to"""
  userName: ID!

  """The ID of this userNotification"""
  userNotificationId: ID!
}

"""These denote where the message is from and what it pertains to."""
enum UserNotificationCategory {
  APP
  PARTNER
}

"""Paginate through UserNotifications"""
type UserNotificationConnection {
  edges: [UserNotificationEdge]!
  nodes: [UserNotification]!
  pageInfo: PageInfo!
}

"""One edge producing one UserNotification node"""
type UserNotificationEdge {
  node: UserNotification
}

"""Input to change the status of a UserNotification"""
input UserNotificationUpdateStatusInput {
  """Denotes how urgent and whether the Notification is archived"""
  status: NotificationStatus!

  """The ID of this userNotification"""
  userNotificationId: ID!
}

"""
Input object to update a User.
Very similiar to User, but does not include sub and email is not required.
"""
input UserUpdateInput {
  address: String

  """
  End-User's birthday, represented as an ISO 8601:2004 YYYY-MM-DD format. The
  year MAY be 0000, indicating that it is omitted. To represent only the year,
  YYYY format is allowed. Note that depending on the underlying platform's date
  related function, providing just year can result in varying month and day, so
  the implementers need to take this factor into account to correctly process the dates.
  """
  birthdate: String
  email: String
  familyName: String
  gender: String
  givenName: String

  """String representing the User's locale, i.e. 'en-us'"""
  locale: String

  """The display name for the User"""
  nickname: String

  """
  End-User's preferred telephone number. E.164 [E.164] is RECOMMENDED as the
  format of this Claim, for example, +1 (425) 555-1212 or +56 (2) 687 2400. If
  the phone number contains an extension, it is RECOMMENDED that the extension
  be represented using the RFC 3966 [RFC3966] extension syntax, for example, +1
  (604) 555-1234;ext=5678.
  """
  phone: String

  """
  URL of the End-User's profile picture. This URL MUST refer to an image file
  (for example, a PNG, JPEG, or GIF image file), rather than to a Web page
  containing an image. Note that this URL SHOULD specifically reference a
  profile photo of the End-User suitable for displaying when describing the
  End-User, rather than an arbitrary photo taken by the End-User.
  """
  picture: String

  """
  URL of the End-User's profile page. The contents of this Web page SHOULD be about the End-User.
  """
  profile: String
  userName: ID!

  """
  URL of the End-User's Web page or blog. This Web page SHOULD contain
  information published by the End-User or an organization that the End-User is
  affiliated with.
  """
  website: String

  """
  Timezone - String from zoneinfo time zone database representing the End-User's
  time zone. For example, Europe/Paris or America/Los_Angeles.
  """
  zoneinfo: String
}