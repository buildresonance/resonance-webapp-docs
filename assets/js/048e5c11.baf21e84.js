"use strict";(self.webpackChunkresonance_webapp_docs=self.webpackChunkresonance_webapp_docs||[]).push([[78370],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return m}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),y=p(a),m=r,d=y["".concat(l,".").concat(m)]||y[m]||u[m]||o;return a?n.createElement(d,i(i({ref:t},c),{},{components:a})):n.createElement(d,i({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=y;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}y.displayName="MDXCreateElement"},46782:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var n=a(87462),r=a(63366),o=(a(67294),a(3905)),i=["components"],s={sidebar_position:4},l="Tags",p={unversionedId:"concepts/tags",id:"concepts/tags",title:"Tags",description:"Tags exist on many different entities throughout Resonance, from Collections to Pages. They are used to categorize or apply attributes to the entity they are attached to.",source:"@site/docs/concepts/tags.md",sourceDirName:"concepts",slug:"/concepts/tags",permalink:"/concepts/tags",editUrl:"https://github.com/obfns/resonance-webapp-docs/tree/main/docs/concepts/tags.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"conceptsSidebar",previous:{title:"Products",permalink:"/concepts/products"},next:{title:"DemandHQ Concepts",permalink:"/concepts/demand-hq/demand-hq-concepts"}},c={},u=[{value:"Comma-Separated Tags",id:"comma-separated-tags",level:2},{value:"Creation",id:"creation",level:3},{value:"Value",id:"value",level:4},{value:"Key",id:"key",level:4},{value:"Category",id:"category",level:4},{value:"What if I want to use a Comma in my Value?",id:"what-if-i-want-to-use-a-comma-in-my-value",level:4},{value:"What about spaces?",id:"what-about-spaces",level:4},{value:"Use",id:"use",level:3},{value:"Filtering",id:"filtering",level:4},{value:"Object Return",id:"object-return",level:4}],y={toc:u};function m(e){var t=e.components,a=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},y,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"tags"},"Tags"),(0,o.kt)("p",null,"Tags exist on many different entities throughout Resonance, from Collections to Pages. They are used to categorize or apply attributes to the entity they are attached to."),(0,o.kt)("h2",{id:"comma-separated-tags"},"Comma-Separated Tags"),(0,o.kt)("p",null,"Tags can be simple strings, but for more advanced usage, they can also have different levels of grouping separated by commas."),(0,o.kt)("h3",{id:"creation"},"Creation"),(0,o.kt)("p",null,"For instance: ",(0,o.kt)("inlineCode",{parentName:"p"},"Category,Key,Value")," allows you to act on three distinct values. Let's look at these in reverse order."),(0,o.kt)("h4",{id:"value"},"Value"),(0,o.kt)("p",null,"A tag always has a value. If you provide just the simple tag ",(0,o.kt)("inlineCode",{parentName:"p"},"myTag"),", then ",(0,o.kt)("inlineCode",{parentName:"p"},"value")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"myTag"),", and both ",(0,o.kt)("inlineCode",{parentName:"p"},"category")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"key")," are null."),(0,o.kt)("p",null,"Similarly, the last part of a comma-separated tag is always the value, so ",(0,o.kt)("inlineCode",{parentName:"p"},"myCategory,myKey,myTag")," also has the value ",(0,o.kt)("inlineCode",{parentName:"p"},"myTag"),"."),(0,o.kt)("h4",{id:"key"},"Key"),(0,o.kt)("p",null,"A tag doesn't always have a key, but if there are two parts to a tag separated by a comma, the first one is the key: ",(0,o.kt)("inlineCode",{parentName:"p"},"myKey,myValue")," (",(0,o.kt)("inlineCode",{parentName:"p"},"myKey"),")"),(0,o.kt)("p",null,"Similarly, if there are three parts to a tag separated by commas, the second part is the key: ",(0,o.kt)("inlineCode",{parentName:"p"},"myCategory,myKey,myTag")," (",(0,o.kt)("inlineCode",{parentName:"p"},"myKey"),")"),(0,o.kt)("h4",{id:"category"},"Category"),(0,o.kt)("p",null,"Only if there are two commas present does a tag contain a Category. When present, it is always the first part: ",(0,o.kt)("inlineCode",{parentName:"p"},"myCategory,myKey,myTag")," (",(0,o.kt)("inlineCode",{parentName:"p"},"myCategory"),")"),(0,o.kt)("h4",{id:"what-if-i-want-to-use-a-comma-in-my-value"},"What if I want to use a Comma in my Value?"),(0,o.kt)("p",null,"This is possible, if not altogether beautiful, you do this by either providing Category and Key: ",(0,o.kt)("inlineCode",{parentName:"p"},"myCategory,myKey,myTag, withCommas")," (",(0,o.kt)("inlineCode",{parentName:"p"},"myTag, withCommas"),")"),(0,o.kt)("p",null,"Or, you can opt to not provide a Category and Key, but you must provide the commas where they would live: ",(0,o.kt)("inlineCode",{parentName:"p"},",,myTag, withCommas")," (",(0,o.kt)("inlineCode",{parentName:"p"},"myTag, withCommas"),")"),(0,o.kt)("h4",{id:"what-about-spaces"},"What about spaces?"),(0,o.kt)("p",null,"You can use spaces inside categories, keys, and values, but any spaces directly after an important comma (the first two) will be removed. (",(0,o.kt)("inlineCode",{parentName:"p"},"myCategory, myKey, myTag")," becomes ",(0,o.kt)("inlineCode",{parentName:"p"},"myCategory,myKey,myTag"),")"),(0,o.kt)("h3",{id:"use"},"Use"),(0,o.kt)("p",null,"Using comma-separated tags is where you start to hit paydirt, as you have two primary advantages using the ",(0,o.kt)("inlineCode",{parentName:"p"},"parsed")," field:"),(0,o.kt)("h4",{id:"filtering"},"Filtering"),(0,o.kt)("p",null,"When you are returning your tags for your given entity, you can optionally filter for a category and/or key, only returning the associated tags:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},'tags {\n    parsed(category: "myCategory", key: "myKey") {\n        category\n        key\n        value\n    }\n}\n')),(0,o.kt)("h4",{id:"object-return"},"Object Return"),(0,o.kt)("p",null,"As you may have noticed just above, you can return tags with their category, key, and value as separate properties of an object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "category": "myCategory",\n    "key": "myKey",\n    "value": "myTag"\n}\n')))}m.isMDXComponent=!0}}]);