(self.webpackChunkresonance_webapp_docs=self.webpackChunkresonance_webapp_docs||[]).push([[3418],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return s},kt:function(){return h}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),d=c(r),h=a,f=d["".concat(l,".").concat(h)]||d[h]||u[h]||o;return r?n.createElement(f,i(i({ref:t},s),{},{components:r})):n.createElement(f,i({ref:t},s))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},237:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return p},metadata:function(){return l},toc:function(){return c},default:function(){return u}});var n=r(2122),a=r(9756),o=(r(7294),r(3905)),i=["components"],p={sidebar_position:1},l={unversionedId:"apis/overall-concepts",id:"apis/overall-concepts",isDocsHomePage:!1,title:"Overall API Concepts",description:"The APIs are split into 3 different categories based on the area of the business they interact with: DemandHQ, Supplier, and Shared (both).",source:"@site/docs/apis/overall-concepts.md",sourceDirName:"apis",slug:"/apis/overall-concepts",permalink:"/apis/overall-concepts",editUrl:"https://github.com/obfns/resonance-webapp-docs/tree/main/docs/apis/overall-concepts.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"apisSidebar",next:{title:"Demand API Concepts",permalink:"/apis/demandhq-apis/demand-api/concepts"}},c=[{value:"IDs",id:"ids",children:[]},{value:"GraphQL",id:"graphql",children:[{value:"GraphQL Developer Tools",id:"graphql-developer-tools",children:[]}]}],s={toc:c};function u(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The APIs are split into 3 different categories based on the area of the business they interact with: DemandHQ, Supplier, and Shared (both)."),(0,o.kt)("h2",{id:"ids"},"IDs"),(0,o.kt)("p",null,"IDs are prefixed with a 5-character type, split by a dash, and then have a date created at sortable random ID appended to it. i.e. ",(0,o.kt)("inlineCode",{parentName:"p"},"prdct-adthcnhT234podvntae%g"),". All IDs are globally unique to the platform."),(0,o.kt)("h2",{id:"graphql"},"GraphQL"),(0,o.kt)("p",null,"All APIs (with a few exceptions) for the platform are based on GraphQL."),(0,o.kt)("h3",{id:"graphql-developer-tools"},"GraphQL Developer Tools"),(0,o.kt)("p",null,"GraphQL related developer tools are a very common way to discover API functionality, and we support any of them that use the GraphQL introspection query. This includes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/graphql/graphiql"},"GraphiQL")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/graphql/graphql-playground"},"GraphQL Playground")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.apollographql.com/docs/studio/explorer/"},"Apollo Studio"))))}u.isMDXComponent=!0}}]);