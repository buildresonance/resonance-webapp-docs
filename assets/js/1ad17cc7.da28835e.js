"use strict";(self.webpackChunkresonance_webapp_docs=self.webpackChunkresonance_webapp_docs||[]).push([[2731],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return h}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),d=c(r),h=o,f=d["".concat(i,".").concat(h)]||d[h]||u[h]||a;return r?n.createElement(f,l(l({ref:t},s),{},{components:r})):n.createElement(f,l({ref:t},s))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=d;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:o,l[1]=p;for(var c=2;c<a;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7003:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return p},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return s},default:function(){return d}});var n=r(2122),o=r(9756),a=(r(7294),r(3905)),l=["components"],p={sidebar_position:1},i="Overall API Concepts",c={unversionedId:"developers/overall-concepts",id:"developers/overall-concepts",isDocsHomePage:!1,title:"Overall API Concepts",description:"The APIs are split into 3 different categories based on the area of the business they interact with: DemandHQ, Supplier, and Shared (both).",source:"@site/docs/developers/overall-concepts.md",sourceDirName:"developers",slug:"/developers/overall-concepts",permalink:"/developers/overall-concepts",editUrl:"https://github.com/obfns/resonance-webapp-docs/tree/main/docs/developers/overall-concepts.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"apisSidebar",next:{title:"Demand API Concepts",permalink:"/developers/demandhq-apis/demand-api/concepts"}},s=[{value:"IDs",id:"ids",children:[]},{value:"GraphQL",id:"graphql",children:[{value:"GraphQL Developer Tools",id:"graphql-developer-tools",children:[]}]}],u={toc:s};function d(e){var t=e.components,r=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"overall-api-concepts"},"Overall API Concepts"),(0,a.kt)("p",null,"The APIs are split into 3 different categories based on the area of the business they interact with: DemandHQ, Supplier, and Shared (both)."),(0,a.kt)("h2",{id:"ids"},"IDs"),(0,a.kt)("p",null,"IDs are prefixed with a 5-character type, split by a dash, and then have a date created at sortable random ID appended to it. i.e. ",(0,a.kt)("inlineCode",{parentName:"p"},"prdct-adthcnhT234podvntae%g"),". All IDs are globally unique to the platform."),(0,a.kt)("h2",{id:"graphql"},"GraphQL"),(0,a.kt)("p",null,"All APIs (with a few exceptions) for the platform are based on GraphQL."),(0,a.kt)("h3",{id:"graphql-developer-tools"},"GraphQL Developer Tools"),(0,a.kt)("p",null,"GraphQL related developer tools are a very common way to discover API functionality, and we support any of them that use the GraphQL introspection query. This includes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/graphql/graphiql"},"GraphiQL")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/graphql/graphql-playground"},"GraphQL Playground")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.apollographql.com/docs/studio/explorer/"},"Apollo Studio"))))}d.isMDXComponent=!0}}]);