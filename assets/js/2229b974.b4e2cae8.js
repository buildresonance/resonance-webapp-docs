"use strict";(self.webpackChunkresonance_webapp_docs=self.webpackChunkresonance_webapp_docs||[]).push([[1675],{3905:function(e,r,n){n.d(r,{Zo:function(){return u},kt:function(){return m}});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function p(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=t.createContext({}),l=function(e){var r=t.useContext(o),n=r;return e&&(n="function"==typeof e?e(r):s(s({},r),e)),n},u=function(e){var r=l(e.components);return t.createElement(o.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,y=d["".concat(o,".").concat(m)]||d[m]||c[m]||i;return n?t.createElement(y,s(s({ref:r},u),{},{components:n})):t.createElement(y,s({ref:r},u))}));function m(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=d;var p={};for(var o in r)hasOwnProperty.call(r,o)&&(p[o]=r[o]);p.originalType=e,p.mdxType="string"==typeof e?e:a,s[1]=p;for(var l=2;l<i;l++)s[l]=n[l];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9550:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return p},contentTitle:function(){return o},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var t=n(3117),a=n(102),i=(n(7294),n(3905)),s=["components"],p={id:"user-display-name",title:"userDisplayName"},o=void 0,l={unversionedId:"developers/shared-apis/adminidentity-api/graphql/reference/queries/user-display-name",id:"developers/shared-apis/adminidentity-api/graphql/reference/queries/user-display-name",isDocsHomePage:!1,title:"userDisplayName",description:"Gets the displayName for any user.",source:"@site/docs/developers/shared-apis/adminidentity-api/graphql/reference/queries/user-display-name.mdx",sourceDirName:"developers/shared-apis/adminidentity-api/graphql/reference/queries",slug:"/developers/shared-apis/adminidentity-api/graphql/reference/queries/user-display-name",permalink:"/developers/shared-apis/adminidentity-api/graphql/reference/queries/user-display-name",editUrl:"https://github.com/obfns/resonance-webapp-docs/tree/main/docs/developers/shared-apis/adminidentity-api/graphql/reference/queries/user-display-name.mdx",tags:[],version:"current",frontMatter:{id:"user-display-name",title:"userDisplayName"},sidebar:"apisSidebar",previous:{title:"queryPublicUserByEmail",permalink:"/developers/shared-apis/adminidentity-api/graphql/reference/queries/query-public-user-by-email"},next:{title:"createApp",permalink:"/developers/shared-apis/adminidentity-api/graphql/reference/mutations/create-app"}},u=[{value:"Arguments",id:"arguments",children:[{value:"<code>userName</code> (ID!)",id:"username-id",children:[],level:4}],level:3},{value:"Type",id:"type",children:[{value:"String",id:"string",children:[],level:4}],level:3}],c={toc:u};function d(e){var r=e.components,n=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,t.Z)({},c,n,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Gets the displayName for any user."),(0,i.kt)("p",null,"This works for any authenticated user with any permissions."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"userDisplayName(\n  userName: ID!\n): String\n\n")),(0,i.kt)("h3",{id:"arguments"},"Arguments"),(0,i.kt)("h4",{id:"username-id"},(0,i.kt)("inlineCode",{parentName:"h4"},"userName")," (",(0,i.kt)("a",{parentName:"h4",href:"/developers/shared-apis/adminidentity-api/graphql/reference/scalars/id"},(0,i.kt)("inlineCode",{parentName:"a"},"ID!")),")"),(0,i.kt)("h3",{id:"type"},"Type"),(0,i.kt)("h4",{id:"string"},(0,i.kt)("a",{parentName:"h4",href:"/developers/shared-apis/adminidentity-api/graphql/reference/scalars/string"},(0,i.kt)("inlineCode",{parentName:"a"},"String"))),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"String")," scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."))}d.isMDXComponent=!0}}]);