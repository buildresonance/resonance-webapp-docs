"use strict";(self.webpackChunkresonance_webapp_docs=self.webpackChunkresonance_webapp_docs||[]).push([[6853],{3905:function(e,r,t){t.d(r,{Zo:function(){return s},kt:function(){return d}});var n=t(7294);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function p(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?p(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function u(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},p=Object.keys(e);for(n=0;n<p.length;n++)t=p[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)t=p[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=n.createContext({}),o=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},s=function(e){var r=o(e.components);return n.createElement(l.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,p=e.originalType,l=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),f=o(t),d=i,m=f["".concat(l,".").concat(d)]||f[d]||c[d]||p;return t?n.createElement(m,a(a({ref:r},s),{},{components:t})):n.createElement(m,a({ref:r},s))}));function d(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var p=t.length,a=new Array(p);a[0]=f;var u={};for(var l in r)hasOwnProperty.call(r,l)&&(u[l]=r[l]);u.originalType=e,u.mdxType="string"==typeof e?e:i,a[1]=u;for(var o=2;o<p;o++)a[o]=t[o];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},7168:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return u},contentTitle:function(){return l},metadata:function(){return o},assets:function(){return s},toc:function(){return c},default:function(){return d}});var n=t(7462),i=t(3366),p=(t(7294),t(3905)),a=["components"],u={id:"supplier-variant-weight-unit",title:"SupplierVariantWeightUnit"},l=void 0,o={unversionedId:"developers/supplier-apis/supply-api/graphql/reference/enums/supplier-variant-weight-unit",id:"developers/supplier-apis/supply-api/graphql/reference/enums/supplier-variant-weight-unit",title:"SupplierVariantWeightUnit",description:"Metric or Standard Weight?",source:"@site/docs/developers/supplier-apis/supply-api/graphql/reference/enums/supplier-variant-weight-unit.mdx",sourceDirName:"developers/supplier-apis/supply-api/graphql/reference/enums",slug:"/developers/supplier-apis/supply-api/graphql/reference/enums/supplier-variant-weight-unit",permalink:"/developers/supplier-apis/supply-api/graphql/reference/enums/supplier-variant-weight-unit",editUrl:"https://github.com/obfns/resonance-webapp-docs/tree/main/docs/developers/supplier-apis/supply-api/graphql/reference/enums/supplier-variant-weight-unit.mdx",tags:[],version:"current",frontMatter:{id:"supplier-variant-weight-unit",title:"SupplierVariantWeightUnit"},sidebar:"apisSidebar",previous:{title:"SupplierVariantStatus",permalink:"/developers/supplier-apis/supply-api/graphql/reference/enums/supplier-variant-status"},next:{title:"SupplyEventMutationType",permalink:"/developers/supplier-apis/supply-api/graphql/reference/enums/supply-event-mutation-type"}},s={},c=[{value:"Values",id:"values",level:3},{value:"<code>GRAMS</code>",id:"grams",level:4},{value:"<code>LBS</code>",id:"lbs",level:4}],f={toc:c};function d(e){var r=e.components,t=(0,i.Z)(e,a);return(0,p.kt)("wrapper",(0,n.Z)({},f,t,{components:r,mdxType:"MDXLayout"}),(0,p.kt)("p",null,"Metric or Standard Weight?"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-graphql"},"enum SupplierVariantWeightUnit {\n  GRAMS\n  LBS\n}\n")),(0,p.kt)("h3",{id:"values"},"Values"),(0,p.kt)("h4",{id:"grams"},(0,p.kt)("inlineCode",{parentName:"h4"},"GRAMS")),(0,p.kt)("h4",{id:"lbs"},(0,p.kt)("inlineCode",{parentName:"h4"},"LBS")))}d.isMDXComponent=!0}}]);