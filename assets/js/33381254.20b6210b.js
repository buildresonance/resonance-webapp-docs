"use strict";(self.webpackChunkresonance_webapp_docs=self.webpackChunkresonance_webapp_docs||[]).push([[9378],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return y}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),u=s(t),y=i,f=u["".concat(c,".").concat(y)]||u[y]||l[y]||a;return t?r.createElement(f,o(o({ref:n},d),{},{components:t})):r.createElement(f,o({ref:n},d))}));function y(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=u;var p={};for(var c in n)hasOwnProperty.call(n,c)&&(p[c]=n[c]);p.originalType=e,p.mdxType="string"==typeof e?e:i,o[1]=p;for(var s=2;s<a;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6922:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return p},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return d},default:function(){return u}});var r=t(7462),i=t(3366),a=(t(7294),t(3905)),o=["components"],p={id:"resonance-identity-type",title:"ResonanceIdentityType"},c=void 0,s={unversionedId:"developers/shared-apis/adminidentity-api/graphql/reference/enums/resonance-identity-type",id:"developers/shared-apis/adminidentity-api/graphql/reference/enums/resonance-identity-type",title:"ResonanceIdentityType",description:"The type of identity an identityId refers to",source:"@site/docs/developers/shared-apis/adminidentity-api/graphql/reference/enums/resonance-identity-type.mdx",sourceDirName:"developers/shared-apis/adminidentity-api/graphql/reference/enums",slug:"/developers/shared-apis/adminidentity-api/graphql/reference/enums/resonance-identity-type",permalink:"/developers/shared-apis/adminidentity-api/graphql/reference/enums/resonance-identity-type",editUrl:"https://github.com/obfns/resonance-webapp-docs/tree/main/docs/developers/shared-apis/adminidentity-api/graphql/reference/enums/resonance-identity-type.mdx",tags:[],version:"current",frontMatter:{id:"resonance-identity-type",title:"ResonanceIdentityType"},sidebar:"apisSidebar",previous:{title:"PartnerRole",permalink:"/developers/shared-apis/adminidentity-api/graphql/reference/enums/partner-role"},next:{title:"UserNotificationCategory",permalink:"/developers/shared-apis/adminidentity-api/graphql/reference/enums/user-notification-category"}},d=[{value:"Values",id:"values",children:[{value:"<code>APPCLIENT</code>",id:"appclient",children:[],level:4},{value:"<code>USER</code>",id:"user",children:[],level:4}],level:3}],l={toc:d};function u(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The type of identity an identityId refers to"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"enum ResonanceIdentityType {\n  APPCLIENT\n  USER\n}\n")),(0,a.kt)("h3",{id:"values"},"Values"),(0,a.kt)("h4",{id:"appclient"},(0,a.kt)("inlineCode",{parentName:"h4"},"APPCLIENT")),(0,a.kt)("h4",{id:"user"},(0,a.kt)("inlineCode",{parentName:"h4"},"USER")))}u.isMDXComponent=!0}}]);