"use strict";(self.webpackChunkresonance_webapp_docs=self.webpackChunkresonance_webapp_docs||[]).push([[35936],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",v={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),u=r,y=d["".concat(l,".").concat(u)]||d[u]||v[u]||o;return n?a.createElement(y,i(i({ref:t},p),{},{components:n})):a.createElement(y,i({ref:t},p))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},34528:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={sidebar_position:3},i="How to Menu (Nav)",s={unversionedId:"concepts/demand-hqs/how-to-nav",id:"concepts/demand-hqs/how-to-nav",title:"How to Menu (Nav)",description:"NavType",source:"@site/docs/concepts/demand-hqs/how-to-nav.md",sourceDirName:"concepts/demand-hqs",slug:"/concepts/demand-hqs/how-to-nav",permalink:"/concepts/demand-hqs/how-to-nav",draft:!1,editUrl:"https://github.com/obfns/resonance-webapp-docs/tree/main/docs/concepts/demand-hqs/how-to-nav.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"conceptsSidebar",previous:{title:"DemandHq Permissions (DemandHqIdentity)",permalink:"/concepts/demand-hqs/permissions"},next:{title:"Cart",permalink:"/concepts/demand-hqs/entities/Cart"}},l={},c=[{value:"NavType",id:"navtype",level:2},{value:"NavLevel",id:"navlevel",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-to-menu-nav"},"How to Menu (Nav)"),(0,r.kt)("h2",{id:"navtype"},"NavType"),(0,r.kt)("p",null,"This describe the purpose of an entire tree, and can also be considered the tree itself as a Navigational Hierarchy is encapsulated within a single NavType. This could be something like ",(0,r.kt)("inlineCode",{parentName:"p"},"main-menu")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"blog-page-sidebar-3"),". NavType is required to query in pretty much every case, as Navs are only unique in anyway within a single NavType (you could have an otherwise identical Nav in two different NavTypes)."),(0,r.kt)("h2",{id:"navlevel"},"NavLevel"),(0,r.kt)("p",null,"NavLevel indicates the level a Nav is within a NavType. This is a digit between 0 and 6 (There are seven possible levels of Navigation, or six if you do not include the Root). For NavLevel 0 in a NavType, there can only ever be a single Nav (the root). From the root, any number of child Navs can be created on NavLevel 1, and the same is true for each new level."),(0,r.kt)("p",null,"All Navs must have a parent besides the root. All Navs may also optionally have children (besides Navs in NavLevel 6)."),(0,r.kt)("p",null,"NavType + NavLevel is the primary way to SCAN or VERTICALLY query within a NavType, as in, crawl through Navs continually exposing children until you have all of the data you require."))}d.isMDXComponent=!0}}]);