"use strict";(self.webpackChunkresonance_webapp_docs=self.webpackChunkresonance_webapp_docs||[]).push([[18170],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},84146:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),o=["components"],l={sidebar_position:2},s="Image Processor",p={unversionedId:"concepts/cdn/image-processor",id:"concepts/cdn/image-processor",title:"Image Processor",description:"Editing an image from a frontend is a little odd, but not complex.",source:"@site/docs/concepts/cdn/image-processor.md",sourceDirName:"concepts/cdn",slug:"/concepts/cdn/image-processor",permalink:"/concepts/cdn/image-processor",editUrl:"https://github.com/obfns/resonance-webapp-docs/tree/main/docs/concepts/cdn/image-processor.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"conceptsSidebar",previous:{title:"CDN Concepts",permalink:"/concepts/cdn/cdn-concepts"}},c={},u=[{value:"How",id:"how",level:2},{value:"Edits",id:"edits",level:2},{value:"Resizing",id:"resizing",level:3},{value:"Round Cropping",id:"round-cropping",level:3},{value:"Other Edits",id:"other-edits",level:3}],d={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"image-processor"},"Image Processor"),(0,i.kt)("p",null,"Editing an image from a frontend is a little odd, but not complex."),(0,i.kt)("h2",{id:"how"},"How"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Get the key of the image using the appropriate API (Storefront is most likely). This key will have the format of ",(0,i.kt)("inlineCode",{parentName:"li"},"{contentItemId}/image.{extension}"),"."),(0,i.kt)("li",{parentName:"ol"},"Build a JSON object that includes the key, as well as the edits desired to the image. The example below makes the image grayscale.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const imageRequestObject = {\n    key: "cntnt-JDFUVHCdsihfkheifbv123v/image.jpg",\n    edits: {\n        grayscale: true,\n    },\n};\n')),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"Stringify the object. Your browser (javascript) provides a nice helper function to do so: ",(0,i.kt)("inlineCode",{parentName:"li"},"JSON.stringify()"),"."),(0,i.kt)("li",{parentName:"ol"},"Base64 encode the stringified object. Your browser (javascript) provides a nice helper for this as well: ",(0,i.kt)("inlineCode",{parentName:"li"},"btoa()"),". A full code example of what the end result may look like:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const imageUrl = `https://cdn.buildresonance.com/images/${btoa(\n    JSON.stringify({\n        key,\n        edits,\n    })\n)}`;\n")),(0,i.kt)("p",null,"All examples from here will only include the ",(0,i.kt)("inlineCode",{parentName:"p"},"edits")," object, but ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," is still required for each request."),(0,i.kt)("h2",{id:"edits"},"Edits"),(0,i.kt)("p",null,"The edits object supports many different types of edits, but first lets cover the most common and some special edits."),(0,i.kt)("h3",{id:"resizing"},"Resizing"),(0,i.kt)("p",null,"The simplest way to resize is just to provide a new width and height:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const edits = {\n    resize: {\n        width: 100,\n        height: 100,\n    },\n};\n")),(0,i.kt)("p",null,"This will definitely work, and provide a new image using a ",(0,i.kt)("inlineCode",{parentName:"p"},"cover")," type fit."),(0,i.kt)("p",null,"You can also change more options, like the fit, see ",(0,i.kt)("a",{parentName:"p",href:"https://sharp.pixelplumbing.com/api-resize#resize"},"resize Sharp documentation")," for more details."),(0,i.kt)("h3",{id:"round-cropping"},"Round Cropping"),(0,i.kt)("p",null,"Round cropping is a more unique feature to our image processor, but the implementation is similar to other features. The property name is ",(0,i.kt)("inlineCode",{parentName:"p"},"roundCrop"),", and you can use it in two ways:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"True. If the value is ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),", the feature returns a circular cropped image that is centered from the original image and has a diameter of the smallest edge of the original image."),(0,i.kt)("li",{parentName:"ol"},"Specific. Details:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"roundCrop.rx: (optional, number) specifies the radius along the x-axis of the ellipse. If a value is not provided, defaults to a value that is half the length of the smallest edge."),(0,i.kt)("li",{parentName:"ul"},"roundCrop.ry: (optional, number) specifies the radius along the y-axis of the ellipse. If a value is not provided, defaults to a value that is half the length of the smallest edge."),(0,i.kt)("li",{parentName:"ul"},"roundCrop.top: (optional, number) specifies the offset from the top of the original image to place the center of the ellipse. If a value is not provided, defaults to a value that is half of the height."),(0,i.kt)("li",{parentName:"ul"},"roundCrop.left: (optional, number) specifies the offset from the left-most edge of the original image to place the center of the ellipse. If a value is not provided, defaults to a value that is half of the width.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const edits = {\n    roundCrop: {\n        rx: 30, // x-axis radius\n        ry: 20, // y-axis radius\n        top: 300, // offset from top edge of original image\n        left: 500, // offset from left edge of original image\n    },\n};\n")),(0,i.kt)("h3",{id:"other-edits"},"Other Edits"),(0,i.kt)("p",null,"The image processor supports all edits supported by Sharp (as of version ",(0,i.kt)("inlineCode",{parentName:"p"},"0.27.0"),"). You can see ",(0,i.kt)("a",{parentName:"p",href:"https://sharp.pixelplumbing.com/api-resize"},"Sharp documentation")," for additional details."),(0,i.kt)("p",null,"The implementation shown by Sharp will be using JavaScript methods, but you can generally apply them similarly, but as an object."),(0,i.kt)("p",null,"Take ",(0,i.kt)("inlineCode",{parentName:"p"},"flip")," as an example. ",(0,i.kt)("a",{parentName:"p",href:"https://sharp.pixelplumbing.com/api-operation#flip"},"Sharp says"),":"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"const output = await sharp(input).flip().toBuffer();")),(0,i.kt)("p",null,"You can ignore the ",(0,i.kt)("inlineCode",{parentName:"p"},"sharp()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"toBuffer()"),", and keep the ",(0,i.kt)("inlineCode",{parentName:"p"},"flip")," like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const edits = {\n    flip: true,\n};\n")),(0,i.kt)("p",null,"You can combine more than one edit, and use options by creating an object, here is an example for ",(0,i.kt)("inlineCode",{parentName:"p"},"extract")," (",(0,i.kt)("a",{parentName:"p",href:"https://sharp.pixelplumbing.com/api-resize#extract"},"docs"),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const edits = {\n    extract: {\n        left: 10,\n        top: 10,\n        width: 100,\n        height: 100,\n    },\n};\n")))}m.isMDXComponent=!0}}]);