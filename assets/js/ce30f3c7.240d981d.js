"use strict";(self.webpackChunkresonance_webapp_docs=self.webpackChunkresonance_webapp_docs||[]).push([[4387],{3905:function(e,r,t){t.d(r,{Zo:function(){return l},kt:function(){return y}});var n=t(7294);function p(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){p(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,n,p=function(e,r){if(null==e)return{};var t,n,p={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(p[t]=e[t]);return p}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(p[t]=e[t])}return p}var s=n.createContext({}),u=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},l=function(e){var r=u(e.components);return n.createElement(s.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,p=e.mdxType,i=e.originalType,s=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),f=u(t),y=p,m=f["".concat(s,".").concat(y)]||f[y]||c[y]||i;return t?n.createElement(m,o(o({ref:r},l),{},{components:t})):n.createElement(m,o({ref:r},l))}));function y(e,r){var t=arguments,p=r&&r.mdxType;if("string"==typeof e||p){var i=t.length,o=new Array(i);o[0]=f;var a={};for(var s in r)hasOwnProperty.call(r,s)&&(a[s]=r[s]);a.originalType=e,a.mdxType="string"==typeof e?e:p,o[1]=a;for(var u=2;u<i;u++)o[u]=t[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},7582:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return a},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return l},default:function(){return f}});var n=t(2122),p=t(9756),i=(t(7294),t(3905)),o=["components"],a={id:"empty",title:"_empty"},s=void 0,u={unversionedId:"developers/supplier-apis/supply-api/reference/queries/empty",id:"developers/supplier-apis/supply-api/reference/queries/empty",isDocsHomePage:!1,title:"_empty",description:"Nothing to see here, just a workaround for Apollo Server",source:"@site/docs/developers/supplier-apis/supply-api/reference/queries/empty.mdx",sourceDirName:"developers/supplier-apis/supply-api/reference/queries",slug:"/developers/supplier-apis/supply-api/reference/queries/empty",permalink:"/developers/supplier-apis/supply-api/reference/queries/empty",editUrl:"https://github.com/obfns/resonance-webapp-docs/tree/main/docs/developers/supplier-apis/supply-api/reference/queries/empty.mdx",version:"current",frontMatter:{id:"empty",title:"_empty"},sidebar:"apisSidebar",previous:{title:"Schema Documentation",permalink:"/developers/supplier-apis/supply-api/reference"},next:{title:"supplier",permalink:"/developers/supplier-apis/supply-api/reference/queries/supplier"}},l=[{value:"Type",id:"type",children:[]}],c={toc:l};function f(e){var r=e.components,t=(0,p.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Nothing to see here, just a workaround for Apollo Server"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"_empty: String\n\n")),(0,i.kt)("h3",{id:"type"},"Type"),(0,i.kt)("h4",{id:"string"},(0,i.kt)("a",{parentName:"h4",href:"/developers/supplier-apis/supply-api/reference/scalars/string"},(0,i.kt)("inlineCode",{parentName:"a"},"String"))),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"String")," scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."))}f.isMDXComponent=!0}}]);