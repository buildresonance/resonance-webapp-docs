"""A date in ISO 8601 format"""
scalar Date

"""Indicates how a filter should behave, defaults to OR"""
enum FilterOperator {
  AND
  NOT
  OR
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""This is the actual content of the page"""
type PageContent {
  """Get the markdown content of the page as parsed HTML."""
  contentAsHtml: String
  contentAsString: String!
  pageId: ID!
  updatedAt: String
}

"""Information on Pagination"""
type PageInfo {
  """
  The cursor to use when paginating forwards (using first/after). Will always be
  populated regardless of if a next page exists.
  """
  endCursor: String

  """
  Whether or not using the endCursor will result in more results. Always
  populated, but will always be false when paginating using last/before.
  """
  hasNextPage: Boolean!

  """
  Whether or not using the startCursor will result in more results. Always
  populated, but will always be false when paginating using first/after.
  """
  hasPreviousPage: Boolean!

  """
  The cursor to use when paginating backwards (using last/before). Will always
  be populated regardless of if a previous page exists
  """
  startCursor: String
}

"""Indicates which field to sort by"""
enum PageSortField {
  PUBLISHED_AT
  RELEVANCE
  TITLE
}

"""Sort Pages by a field and direction."""
input PageSortInput {
  direction: SortDirection!
  field: PageSortField!
}

"""These are the tags associated to the page"""
type PageTags {
  """Get parsed, and optionally filtered, tags for a Page."""
  parsed(
    """Optionally filter tags by category."""
    category: String

    """
    Optionally filter tags by key. If category is not provided, but key is, category must be null to be returned.
    """
    key: String
  ): ParsedTag
  raw: [String]
}

"""A Map of several fields of Page and term aggregations for each"""
type PageTermAggregations {
  authors: [TermAggregation!]
  pageTypes: [TermAggregation!]
  tags: [TermAggregation!]
}

"""An up to 3-part tag, comma-separated, that has been parsed"""
type ParsedTag {
  """The category of the tag"""
  category: String

  """The key of the tag"""
  key: String

  """The value of the tag"""
  value: String!
}

"""
A Page is a part of the Demand Domain and represents a page with textual and
image content on it, that has nothing to do with products.
This can range from "About Us" pages to Blog articles. Use the "pageType" field to differentiate.
Pages do not have locales specified, but since everything would be different
anyway, "pageType" can be a composite key with locale in it.
"""
type PublicPage {
  """The author of the page, limit 256 characters."""
  author: String

  """Get the content of the page."""
  content: PageContent
  demandHqId: ID!

  """A short description of the page, limit 1000 characters."""
  description: String
  pageId: ID!

  """
  Any string to declare a category of this page, can be used to filter pages, limit 128 characters.
  """
  pageType: String!

  """
  A primary image url for this page, can be generated from a Page ContentItem.
  """
  primaryImageUrl: String

  """
  ISO format date when the page was published. Note that ensuing updates with
  status set to PUBLISHED will republish and re-set this date.
  """
  publishedAt: Date

  """Title specific for SEO purposes, limit 256 characters."""
  seoTitle: String

  """Slug for the URL for this page. Limit 128 characters."""
  slug: String!

  """The subtitle of the page, limit 256 characters."""
  subtitle: String

  """Get the tags of the page."""
  tags: PageTags

  """The title of the page, limit 256 characters."""
  title: String!
}

"""Paginate through PublicPages"""
type PublicPageConnectionWithSearch {
  edges: [PublicPageEdge]!
  nodes: [PublicPage]!
  pageInfo: PageInfo!

  """
  This is an object with terms in the query as keys, and a suggestion for that
  term as the value. This is often referred to as 'Did you mean?'
  """
  querySuggestions: JSON
}

"""One edge producing one PublicPage Node"""
type PublicPageEdge {
  node: PublicPage
}

"""
A Storefront is the parent-most entity in the Storefront API, and represents the entire site.
"""
type PublicStorefront {
  demandHqId: ID!
  description: String
  name: String!
  storefrontId: ID!
  urlDomain: String!
}

"""The root query type for the Demand domain"""
type Query {
  """Nothing to see here, just a workaround for Apollo Server"""
  _empty: String

  """Returns the health of the service"""
  health: String

  """
  Get a page by its slug.
  
  Requires the publicpage/read scope.
  """
  page(slug: String!): PublicPage

  """
  Term aggregations for Pages, typically used to suggest terms to use in Search Filters.
  """
  pageTermAggregations(
    """The number of aggregations to return for each type."""
    numberOfResults: Int!
  ): PageTermAggregations

  """
  List pages for a Storefront with optional filters.
              
  Requires the publicpage/read scope.
  """
  pages(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Filter Pages using author"""
    author: StringFilterInput

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int

    """Filter Pages using pageType"""
    pageType: StringFilterInput

    """
    Query pages for certain terms. Searches several fields, including
    page.author, page.description, page.subtitle, page.title, pageTags, and the
    actual content of the page.
    """
    query: String

    """Filter Pages using slugs"""
    slugs: [String]

    """Sort Pages by a series of fields and directions."""
    sortOrder: [PageSortInput]

    """Filter Pages using Tags."""
    tags: [StringFilterInput]
  ): PublicPageConnectionWithSearch!

  """
  Get the storefront associated with the requesting storefront identity.
              
  Requires the "publicstorefront/read" permission.
  """
  storefront: PublicStorefront
}

"""Indicates which direction to sort, defaults to ASC"""
enum SortDirection {
  ASC
  DESC
}

"""Filter using a combination of operator and an array of string values"""
input StringFilterInput {
  operator: FilterOperator
  values: [String!]!
}

"""
Indicates the key of the term aggregation, and approximately how many documents it occurs in. 
"""
type TermAggregation {
  docCount: Int!
  key: String!
}
