"""The globally used Address of Resonance"""
type Address {
  """The city of the address"""
  city: String!

  """The company associated with the address"""
  company: String

  """The country of the address"""
  country: String!

  """The name associated with the address, i.e. the Person in the household"""
  name: String!

  """The phone number of the address. Format +11231231234"""
  phoneNumber: String

  """The zip or postal code of the address"""
  postalCode: String!

  """The state of the address"""
  state: String!

  """The first line of the street address"""
  streetAddress1: String!

  """The second line of the street address"""
  streetAddress2: String
}

"""The input type for an Address"""
input AddressInput {
  """The city of the address"""
  city: String!

  """The company associated with the address"""
  company: String

  """The country of the address"""
  country: String!

  """The name associated with the address, i.e. the Person in the household"""
  name: String!

  """The phone number of the address. Format +11231231234"""
  phoneNumber: String

  """The zip or postal code of the address"""
  postalCode: String!

  """The state of the address"""
  state: String!

  """The first line of the street address"""
  streetAddress1: String!

  """The second line of the street address"""
  streetAddress2: String
}

"""
A cart is a temporary container for products that a customer or anonymous user wants to buy
"""
type Cart {
  cartItems: [CartItem]
  cartType: CartType!
  demandHqId: ID!
  externalCustomerOrDeviceId: String!
  savedForLaterItems: [SavedForLaterItem]
  storefrontId: ID!
  updatedAt: Date!
}

"""
Input for adding or updating items in a cart or savedForLater
Can be used in combination with CartAddOrUpdateItemsInput to move items between cartItems and savedForLaterItems.
"""
input CartAddOrUpdateItemsInput {
  cartItems: [CartItemInput]
  savedForLaterItems: [SavedForLaterItemInput]
}

"""This is an item in the actual cart, ready for purchase."""
type CartItem {
  customProperties: JSON
  quantity: Int!

  """
  The variant that this cart item is associated with.
              
  Requires publicvariant/read permission on the requesting identity.
  """
  variant: PublicVariant
  variantId: ID!
}

"""This input type is used to add or update items in the cart."""
input CartItemInput {
  customProperties: JSON
  quantity: Int!
  variantId: ID!
}

"""
Input for removing items from a cart or savedForLater
Can be used in combination with CartAddOrUpdateItemsInput to move items between cartItems and savedForLaterItems.
"""
input CartRemoveItemsInput {
  cartItems: [ID!]
  savedForLaterItems: [ID!]
}

"""Indicates the type of cart"""
enum CartType {
  """Indicates that the cart is for a logged in customer"""
  CUSTOMER

  """Indicates this cart is anonymous and tied to a device"""
  DEVICE
}

"""
A checkout is a temporary container for an order and its orderItems that a customer or anonymous user wants to buy
"""
type Checkout {
  checkoutType: CheckoutType!
  createdAt: Date!
  currency: ResonanceCurrency!
  demandHqId: ID!
  externalCustomerOrDeviceId: String!
  order: CheckoutOrder
  orderItems: [CheckoutOrderItem]
  storefrontId: ID!
  updatedAt: Date!
}

"""An error that occurred during checkout validation"""
type CheckoutError {
  """A CompleteCheckoutErrorCode"""
  code: CheckoutErrorCode!

  """A JSON object containing specific details about the error"""
  details: JSON

  """A human readable error message"""
  message: String!
}

"""Error codes for the CheckoutError type"""
enum CheckoutErrorCode {
  CHECKOUT_INVALID
  CHECKOUT_NOT_FOUND
  CHECKOUT_ORDER_INVALID
  CHECKOUT_ORDER_ITEMS_INVALID
  CHECKOUT_ORDER_ITEMS_NOT_FOUND
  CHECKOUT_ORDER_ITEM_QUANTITY_NOT_FOUND
  CHECKOUT_ORDER_NOT_FOUND
  CUSTOMER_NOT_FOUND
  FAILED_TO_COMPLETE_CHECKOUT
  INSUFFICIENT_QUANTITY
  INVALID_AUTHORIZE_NET_TRANSACTION
  INVALID_ORDER_TRANSACTION
  ORDER_INPUT_INVALID
  ORDER_ITEMS_INVALID
  ORDER_TAGS_INVALID
  PRODUCT_NOT_FOUND
  UNPROCESSED_ORDER_ITEMS
  VARIANT_DUPLICATE
  VARIANT_METRICS_NOT_FOUND
  VARIANT_NOT_FOUND
}

"""
This is an order in the checkout process, pending creation.
Nearly all fields are optional, but their existence is still required by the end
of the checkout process if they are required for Orders.
"""
type CheckoutOrder {
  billingAddress: Address

  """A note provided by the customer at time of order"""
  customerNote: String
  emailAddress: String

  """
  A reference to an outside payment gateway, used for tracking transactions. May be an orderID, or a paymentID.
  """
  paymentId: ID
  phoneNumber: String
  shippingAddress: Address
  shippingCharges: [OrderShippingCharge]
  tags: [String]
}

"""Create or Update a CheckoutOrder"""
input CheckoutOrderInput {
  billingAddress: AddressInput

  """A note provided by the customer at time of order"""
  customerNote: String
  emailAddress: String

  """
  A reference to an outside payment gateway, used for tracking transactions. May be an orderID, or a paymentID.
  """
  paymentId: ID
  phoneNumber: String
  shippingAddress: AddressInput
  shippingCharges: [OrderShippingChargeInput]
  tags: [String]
}

"""
This is an orderItem in the checkout process, pending order creation.
Nearly all fields are optional, but their existence is still required by the end
of the checkout process if they are required for OrderItems.
"""
type CheckoutOrderItem {
  customProperties: JSON

  """
  The aggregate amount of all discounts applied to the OrderItem, can be subtracted from the subtotal directly.
  """
  discountTotal: Float!
  discounts: [OrderItemDiscount]

  """
  The aggregate amount the consumer must pay for the item including price,
  quantity, adjustments, discounts, shippingCharges, and taxes.
  """
  grandTotal: Float!
  note: String
  quantity: Int
  shippingCharges: [OrderShippingCharge]

  """
  The aggregate amount of all shipping charges applied to the OrderItem, can be added to the subtotal directly.
  """
  shippingChargesTotal: Float!
  shippingMethod: ShippingMethod

  """
  The aggregate amount of all taxes applied to the OrderItem, can be added to the subtotal directly.
  """
  taxTotal: Float!
  taxes: [OrderItemTax]

  """Price per item, can be multiplied by quantity for total price"""
  unitPrice: Float

  """
  The variant that this checkout order item is associated with.
          
  Requires publicvariant/read permission on the requesting identity.
  """
  variant: PublicVariant
  variantId: ID!
}

"""Create or Update a CheckoutOrderItem"""
input CheckoutOrderItemInput {
  customProperties: JSON
  discounts: [OrderItemDiscountInput]
  note: String
  quantity: Int
  shippingCharges: [OrderShippingChargeInput]
  shippingMethod: ShippingMethod
  taxes: [OrderItemTaxInput]

  """Price per item, can be multiplied by quantity for total price"""
  unitPrice: Float
  variantId: ID!
}

"""Create a CheckoutOrderTransaction"""
input CheckoutOrderTransactionInput {
  amount: Float!
  authorizationCode: String
  authorizationExpiresAt: Date
  currency: ResonanceCurrency!
  currencyExchangeAdjustment: OrderTransactionCurrencyExchangeAdjustmentInput
  errorMessage: String
  gateway: OrderTransactionGateway!
  gatewayMessage: String
  gatewayTransactionId: ID
  orderTransactionType: OrderTransactionType!
  processedAt: Date
}

"""Indicates the type of checkout"""
enum CheckoutType {
  """Indicates that the checkout is for a logged in customer"""
  CUSTOMER

  """Indicates this checkout is anonymous and tied to a device"""
  DEVICE
}

"""This is the actual content of the collection"""
type CollectionContent {
  collectionId: ID!

  """
  Get the markdown content of the collection as parsed HTML. Do not use this
  field without purifying or sanitizing the HTML in your webapp.
  """
  contentAsHtml: String
  contentAsString: String!

  """Get an excerpt of the collection content."""
  excerpt(
    """The number of characters to return, defaults to 200."""
    numberOfCharacters: Int
  ): String

  """
  Get the secondary markdown content of the collection as parsed HTML. Do not
  use this field without purifying or sanitizing the HTML in your webapp.
  """
  secondaryContentAsHtml: String
  secondaryContentAsString: String
  updatedAt: String
}

"""
The number of results to return for each term aggregation. Defaults to 0 for each.
"""
input CollectionNumberOfTermAggregationsInput {
  collectionTypes: Int
  tags: Int
}

"""Indicates which field to sort by"""
enum CollectionSortField {
  CREATED_AT
  PUBLISHED_AT
  RELEVANCE
  TITLE
  UPDATED_AT
}

"""Sort Collections by a field and direction."""
input CollectionSortInput {
  direction: SortDirection!
  field: CollectionSortField!
}

"""These are the tags associated to the collection"""
type CollectionTags {
  """Get parsed, and optionally filtered, tags for a Collection."""
  parsed(
    """Optionally filter tags by category."""
    category: String

    """
    Optionally filter tags by key. If category is not provided, but key is, category must be null to be returned.
    """
    key: String
  ): [ParsedTag]
  raw: [String]
}

"""A Map of several fields of Collection and term aggregations for each"""
type CollectionTermAggregations {
  collectionTypes: [TermAggregation!]
  tags: [TermAggregation!]
}

"""
These tags function in the opposite direction of other tags, allowing you to
choose several to focus on while displaying the content.
Commonly, these are used to filter or categorize content by providing options that match tags on the content itself.
"""
type CollectionTypeContentTags {
  """Get parsed, and optionally filtered, tags for a Page."""
  parsed(
    """Optionally filter tags by category."""
    category: String

    """
    Optionally filter tags by key. If category is not provided, but key is, category must be null to be returned.
    """
    key: String
  ): [ParsedTag]
  raw: [String!]
}

"""
The process of checkout completion is asynchronous so there is no data (like an order id) to return to the caller.
"""
type CompleteCheckoutResponse {
  message: String!
}

"""
A customer of a given Storefront is a user who places orders on the Storefront
"""
type Customer {
  """
  Get a CustomerAddress by their customerAddressId.
  
  Requires the publiccustomeraddress/read permission.
  """
  customerAddress(customerAddressId: ID!): CustomerAddress

  """
  Get a list of CustomerAddresses.
  
  Requires the publiccustomeraddress/read permission.
  """
  customerAddresses(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    customerAddressIds: [ID!]

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): CustomerAddressConnection!
  customerId: ID!

  """
  Get the default billing address for a customer.
  
  Requires the publiccustomeraddress/read permission.
  """
  defaultBillingAddress: CustomerAddress

  """
  The CustomerAddressId for the default billing address for this Customer
  """
  defaultBillingAddressId: ID

  """
  Get the default shipping address for a customer.
  
  Requires the publiccustomeraddress/read permission.
  """
  defaultShippingAddress: CustomerAddress

  """
  The CustomerAddressId for the default shipping address for this Customer
  """
  defaultShippingAddressId: ID
  demandHqId: ID!

  """
  The email address associated with the Customer, must be unique to the storefront, limit 256 characters
  """
  emailAddress: String!
  emailMarketingConsent: CustomerMarketingConsent

  """
  Reference to the storefront's customer authentication system. Limit 256 characters.
  This field is required if this customer is going to access any authenticated data (like their orders).
  """
  externalCustomerId: ID

  """The first name of the Customer, limit 256 characters"""
  firstName: String

  """The last name of the Customer, limit 256 characters"""
  lastName: String

  """
  Must be unique to the Storefront. Limit 64 characters. Format +11231231234
  """
  phoneNumber: String
  smsMarketingConsent: CustomerMarketingConsent
  storefrontId: ID!

  """Get the tags of the customer."""
  tags: CustomerTags
}

"""
A customerAddress is an Address entity that is associated with a customer
"""
type CustomerAddress {
  """The city of the address"""
  city: String!

  """The company associated with the address"""
  company: String

  """The country of the address"""
  country: String!
  customerAddressId: ID!
  customerId: ID!
  demandHqId: ID!

  """The name associated with the address, i.e. the Person in the household"""
  name: String!

  """The phone number of the address. Format +11231231234"""
  phoneNumber: String

  """The zip or postal code of the address"""
  postalCode: String!

  """The state of the address"""
  state: String!
  storefrontId: ID!

  """The first line of the street address"""
  streetAddress1: String!

  """The second line of the street address"""
  streetAddress2: String
}

"""Paginate through CustomerAddresses"""
type CustomerAddressConnection {
  edges: [CustomerAddressEdge]!
  nodes: [CustomerAddress]!
  pageInfo: PageInfo!
}

"""Input for creating a CustomerAddress"""
input CustomerAddressCreateInput {
  """The city of the address"""
  city: String!

  """The company associated with the address"""
  company: String

  """The country of the address"""
  country: String!
  customerId: ID!
  demandHqId: ID!

  """The name associated with the address, i.e. the Person in the household"""
  name: String!

  """The phone number of the address. Format +11231231234"""
  phoneNumber: String

  """The zip or postal code of the address"""
  postalCode: String!

  """The state of the address"""
  state: String!
  storefrontId: ID!

  """The first line of the street address"""
  streetAddress1: String!

  """The second line of the street address"""
  streetAddress2: String
}

"""One edge producing one CustomerAddress Node"""
type CustomerAddressEdge {
  node: CustomerAddress
}

"""Input for updating a CustomerAddress"""
input CustomerAddressUpdateInput {
  """The city of the address"""
  city: String

  """The company associated with the address"""
  company: String

  """The country of the address"""
  country: String
  customerAddressId: ID!

  """The name associated with the address, i.e. the Person in the household"""
  name: String

  """The phone number of the address. Format +11231231234"""
  phoneNumber: String

  """The zip or postal code of the address"""
  postalCode: String

  """The state of the address"""
  state: String

  """The first line of the street address"""
  streetAddress1: String

  """The second line of the street address"""
  streetAddress2: String
}

"""Input for creating a Customer"""
input CustomerCreateInput {
  """
  The CustomerAddressId for the default billing address for this Customer
  """
  defaultBillingAddressId: ID

  """
  The CustomerAddressId for the default shipping address for this Customer
  """
  defaultShippingAddressId: ID

  """
  The email address associated with the Customer, must be unique to the storefront, limit 256 characters
  """
  emailAddress: String!
  emailMarketingConsent: CustomerMarketingConsentInput

  """
  Reference to the storefront's customer authentication system. Limit 256 characters.
  This field is required if this customer is going to access any authenticated data (like their orders).
  """
  externalCustomerId: ID

  """The first name of the Customer, limit 256 characters"""
  firstName: String

  """The last name of the Customer, limit 256 characters"""
  lastName: String

  """
  Must be unique to the Storefront. Limit 64 characters. Format +11231231234
  """
  phoneNumber: String
  smsMarketingConsent: CustomerMarketingConsentInput
}

"""Details about the Customer's marketing consent"""
type CustomerMarketingConsent {
  """The level at which the Customer has consented to marketing"""
  consentLevel: CustomerMarketingConsentLevel!

  """The date the associated Customer agreed to the marketing consent"""
  consentedAt: Date!
  hasConsented: Boolean!

  """Optional field to store where consent was sourced from"""
  source: String
}

"""Input for updating a Customer's marketing consent"""
input CustomerMarketingConsentInput {
  """The level at which the Customer has consented to marketing"""
  consentLevel: CustomerMarketingConsentLevel!

  """The date the associated Customer agreed to the marketing consent"""
  consentedAt: Date!
  hasConsented: Boolean!

  """Optional field to store where consent was sourced from"""
  source: String
}

"""The level at which the Customer has opted-in to Marketing."""
enum CustomerMarketingConsentLevel {
  """Level 3"""
  CONFIRMED_OPT_IN

  """Level 1"""
  SINGLE_OPT_IN

  """Level 2"""
  SINGLE_OPT_IN_WITH_NOTIFICATION
  UNKNOWN
}

"""These are the tags associated to the Customer"""
type CustomerTags {
  """Get parsed, and optionally filtered, tags for a Customer."""
  parsed(
    """Optionally filter tags by category."""
    category: String

    """
    Optionally filter tags by key. If category is not provided, but key is, category must be null to be returned.
    """
    key: String
  ): [ParsedTag]
  raw: [String]
}

"""Input for updating a Customer"""
input CustomerUpdateInput {
  """
  The CustomerAddressId for the default billing address for this Customer
  """
  defaultBillingAddressId: ID

  """
  The CustomerAddressId for the default shipping address for this Customer
  """
  defaultShippingAddressId: ID

  """
  The email address associated with the Customer, must be unique to the storefront, limit 256 characters
  """
  emailAddress: String
  emailMarketingConsent: CustomerMarketingConsentInput

  """The first name of the Customer, limit 256 characters"""
  firstName: String

  """The last name of the Customer, limit 256 characters"""
  lastName: String

  """
  Must be unique to the Storefront. Limit 64 characters. Format +11231231234
  """
  phoneNumber: String
  smsMarketingConsent: CustomerMarketingConsentInput
}

"""A date in ISO 8601 format"""
scalar Date

"""Returned object from deleteCustomerAddress"""
type DeleteCustomerAddressResponse {
  """The customerAddressId of the customerAddress that was deleted."""
  deletedId: ID!
}

"""Indicates how a filter should behave, defaults to OR"""
enum FilterOperator {
  AND
  NOT
  OR
}

"""
Filter using a min/max number range, in combination these function like an 'Any' filter.
"""
input FloatRangeFilterInput {
  max: Float!
  min: Float!
}

"""Indicates whether a variant is in or out of stock"""
enum InventoryStatus {
  INSTOCK
  OUTOFSTOCK
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The root mutation type for the Demand domain"""
type Mutation {
  """
  Add, Update, or Remove Items from a Customer Cart or SavedForLater.
  If you are attempting to move an item from the cartItems to savedForLaterItems or vice versa, you must
  both add and remove the item in the same mutation, which is allowed.
  
  Requires the publiccart/write scope and a valid customer authentication token.
  """
  changeCustomerCart(
    """
    The items to add or update for the cart or savedForLater. Either
    addOrUpdateItems or removeItems must be provided, and both can be provided.
    """
    addOrUpdateItems: CartAddOrUpdateItemsInput
    customerToken: String!

    """
    The items to add or update to savedForLater. Either addOrUpdateItems or
    removeItems must be provided, and both can be provided.
    """
    removeItems: CartRemoveItemsInput
  ): Cart!

  """
  Add, Update, or Remove Items from a Device Cart or SavedForLater.
  If you are attempting to move an item from the cartItems to savedForLaterItems or vice versa, you must
  both add and remove the item in the same mutation, which is allowed.
  
  Requires the publiccart/write scope.
  """
  changeDeviceCart(
    """
    The items to add or update for the cart or savedForLater. Either
    addOrUpdateItems or removeItems must be provided, and both can be provided.
    """
    addOrUpdateItems: CartAddOrUpdateItemsInput
    deviceId: String!

    """
    The items to add or update to savedForLater. Either addOrUpdateItems or
    removeItems must be provided, and both can be provided.
    """
    removeItems: CartRemoveItemsInput
  ): Cart!

  """
  Completes a checkout, queueing a request to create an order, orderItems, and orderTransaction.
  
  Requires the publiccheckout/write scope and a valid customerToken.
  """
  completeCheckout(customerToken: String!, orderTransactionInput: CheckoutOrderTransactionInput!): CompleteCheckoutResponse!

  """
  Create a Customer.
  
  Requires the publiccustomer/write scope.
  """
  createCustomer(input: CustomerCreateInput!): Customer!

  """
  Creates a new CustomerAddress
  
  Requires the customeraddress/write scope on the associated DemandHq.
  """
  createCustomerAddress(customerToken: String!, input: CustomerAddressCreateInput!): CustomerAddress

  """
  Creates a new checkout for a logged in customer.
  Unlike most creates, this will overwrite any existing checkout for the customer, starting from scratch.
              
  Requires the publiccheckout/write scope and a valid customerToken.
  """
  createCustomerCheckout(currency: ResonanceCurrency!, customerToken: String!, orderInput: CheckoutOrderInput, orderItemInputs: [CheckoutOrderItemInput]): Checkout!

  """
  Deletes a CustomerAddress
  
  Requires the customeraddress/write scope on the associated DemandHq.
  """
  deleteCustomerAddress(customerAddressId: ID!, customerToken: String!): DeleteCustomerAddressResponse!

  """
  Merge a device cart into a customer cart. This is primarily done when an anonymous user logs in.
  The device cart will have its items added to the customer cart and then have
  its cartItems cleared. The new customer cart will be returned.
  
  Requires the publiccart/write scope and a valid customer authentication token.
  """
  mergeDeviceCartIntoCustomerCart(customerToken: String!, deviceId: String!): Cart!

  """
  Update a Customer.
  
  Requires the publiccustomer/write scope and a valid customer authentication token.
  """
  updateCustomer(customerToken: String!, input: CustomerUpdateInput!): Customer!

  """
  Updates an existing CustomerAddress
  
  Requires the customeraddress/write scope on the associated DemandHq.
  """
  updateCustomerAddress(customerToken: String!, input: CustomerAddressUpdateInput!): CustomerAddress

  """
  Updates an existing checkout's order fields for a logged in customer.
  Updates are partial, and will only affect fields provided.
              
  Requires the publiccheckout/write scope and a valid customerToken.
  """
  updateCustomerCheckoutOrder(customerToken: String!, orderInput: CheckoutOrderInput!): Checkout!

  """
  Updates an existing checkout's order item's fields for a logged in customer.
  Updates are partial, and will only affect fields provided for each orderItemInput.
              
  Requires the publiccheckout/write scope and a valid customerToken.
  """
  updateCustomerCheckoutOrderItems(customerToken: String!, orderItemInputs: [CheckoutOrderItemInput!]!): Checkout!

  """
  Validates an existing checkout for a logged in customer as ready to be converted to an order.
  
  Requires the publiccheckout/write scope and a valid customerToken.
  """
  validateCustomerCheckout(customerToken: String!): ValidateCheckoutResponse!
}

"""
An adjustment to an OrderItem. Adjustments to orders occur for a variety of
reasons, and are only allowed at certain stages of the order process.
"""
type OrderItemAdjustment {
  adjustedAt: Date!

  """The amount of the adjustment."""
  adjustmentAmount: Float!

  """The reason for the adjustment."""
  adjustmentReason: OrderItemAdjustmentReason!

  """The type of adjustment."""
  adjustmentType: OrderItemAdjustmentType!
}

"""Indicates why an Adjustment occurred."""
enum OrderItemAdjustmentReason {
  CUSTOMER_FOUND_LOWER_PRICE
  CUSTOMER_NO_LONGER_NEEDS
  CUSTOMER_ORDERED_BY_ACCIDENT
  CUSTOMER_OTHER
  CUSTOMER_SHIPPING_TOOK_TOO_LONG
  ITEM_NOT_AS_ADVERTISED
  OTHER
  OUT_OF_STOCK
  SPOT_DISCOUNT
  WRONG_ITEM_SHIPPED
}

"""Indicates how to apply an OrderItemAdjustment."""
enum OrderItemAdjustmentType {
  PRICE
  QUANTITY
}

"""
A discount applied to an OrderItem. Discounts alter pricing of an OrderItem, and may include a coupon code to do so.
"""
type OrderItemDiscount {
  code: String

  """The amount of the discount."""
  discountAmount: Float!

  """The type of discount."""
  discountType: OrderItemDiscountType!
  discountedAt: Date!
}

"""Create or Update an OrderItemDiscount"""
input OrderItemDiscountInput {
  code: String

  """The amount of the discount."""
  discountAmount: Float!

  """The type of discount."""
  discountType: OrderItemDiscountType!
  discountedAt: Date!
}

"""Indicates how a discount should be applied"""
enum OrderItemDiscountType {
  PERCENTAGE
  PRICE
}

"""A relationship entity between an OrderItem and a PurchaseOrderItem."""
type OrderItemPurchaseOrderItem {
  fulfillments: [PurchaseOrderItemFulfillment]
  orderItemId: ID!
  purchaseOrderItemId: ID!
  quantity: Int!
  status: PurchaseOrderItemStatus!
}

"""Indicates the status of an OrderItem."""
enum OrderItemStatus {
  ASSIGNED

  """
  Indicates that the OrderItem was assigned, but is no longer needed to be fulfilled.
  """
  CANCELLED

  """Indicates that the OrderItem is fully fulfilled and is now complete."""
  FULFILLED

  """
  Indicates that the OrderItem is ready for processing, and data is complete.
  """
  INITIAL
  PARTIALLY_ASSIGNED

  """Indicates that the OrderItem is in the process of being fulfilled."""
  PARTIALLY_FULFILLED
}

"""A tax applied to an OrderItem."""
type OrderItemTax {
  amount: Float!
  rate: Float!
  title: String!
}

"""Create or Update an OrderItemTax"""
input OrderItemTaxInput {
  amount: Float!
  rate: Float!
  title: String!
}

"""A shippingCharge applied to an Order."""
type OrderShippingCharge {
  amount: Float!
  title: String
}

"""Create or Update an OrderShippingCharge"""
input OrderShippingChargeInput {
  amount: Float!
  title: String
}

"""Indicates the lifecycle stage an order is in"""
enum OrderStatus {
  """Order has been authorized, waiting on fulfillment"""
  AUTHORIZED

  """Order has been completely cancelled"""
  CANCELLED

  """
  Order has been paid, and is now complete. This can also indicate that an order
  was partially or fully refunded, but that process is also complete.
  """
  COMPLETE

  """
  Initial state for an order, during which it can contain invalid or incomplete information
  """
  DRAFT

  """Order has been fulfilled, waiting on payment"""
  FULFILLED

  """
  Order has been partially fulfilled, and paid up for the currently fulfilled items
  """
  PARTIALLY_FULFILLED

  """
  Order has been partially fulfilled, waiting on other fulfillments and for the existing fulfillments payment
  """
  PARTIALLY_FULFILLED_AWAITING_PAYMENT

  """Order has been placed, waiting on authorization"""
  PENDING
}

"""These are the tags associated to the order"""
type OrderTags {
  """Get parsed, and optionally filtered, tags for a Order."""
  parsed(
    """Optionally filter tags by category."""
    category: String

    """
    Optionally filter tags by key. If category is not provided, but key is, category must be null to be returned.
    """
    key: String
  ): [ParsedTag]
  raw: [String]
}

"""
If money is accepted in a foreign currency, this object describes amounts and currencies in the Shop's default currency.
"""
type OrderTransactionCurrencyExchangeAdjustment {
  """The amount in the shop's default currency."""
  targetAmount: Float!

  """Shop's default currency."""
  targetCurrency: ResonanceCurrency!
}

"""Input for OrderTransactionCurrencyExchangeAdjustment"""
input OrderTransactionCurrencyExchangeAdjustmentInput {
  """The amount in the shop's default currency."""
  targetAmount: Float!

  """Shop's default currency."""
  targetCurrency: ResonanceCurrency!
}

"""Indicates which Payment Gateway was used for a Transaction."""
enum OrderTransactionGateway {
  AUTHORIZE_NET
  MANUAL
  TEST
}

"""Indicates the purpose of a given OrderTransaction."""
enum OrderTransactionType {
  """
  Money that the customer has agreed to pay.
  The authorization period can be between 7 and 30 days (depending on your
  payment service) while a store waits for a payment to be captured.
  """
  AUTHORIZATION

  """
  A transfer of money that was reserved during the authorization of a shop.
  """
  CAPTURE

  """The partial or full return of captured money to the customer."""
  REFUND

  """
  The authorization and capture of a payment performed in one single step.
  """
  SALE

  """The cancellation of a pending authorization or capture."""
  VOID
}

"""This is the actual content of the page"""
type PageContent {
  """
  Get the markdown content of the page as parsed HTML. Do not use this field
  without purifying or sanitizing the HTML in your webapp.
  """
  contentAsHtml: String
  contentAsString: String!

  """Get an excerpt of the page content."""
  excerpt(
    """The number of characters to return, defaults to 200."""
    numberOfCharacters: Int
  ): String
  pageId: ID!
  updatedAt: String
}

"""Information on Pagination"""
type PageInfo {
  """
  The cursor to use when paginating forwards (using first/after). Will always be
  populated regardless of if a next page exists.
  """
  endCursor: String

  """
  Whether or not using the endCursor will result in more results. Always
  populated, but will always be false when paginating using last/before.
  """
  hasNextPage: Boolean!

  """
  Whether or not using the startCursor will result in more results. Always
  populated, but will always be false when paginating using first/after.
  """
  hasPreviousPage: Boolean!

  """
  The cursor to use when paginating backwards (using last/before). Will always
  be populated regardless of if a previous page exists
  """
  startCursor: String
}

"""
The number of results to return for each term aggregation. Defaults to 0 for each.
"""
input PageNumberOfTermAggregationsInput {
  authors: Int
  pageTypes: Int
  tags: Int
}

"""A page that is being recommended for a requested reason."""
type PageRecommendation {
  pageId: ID!
}

"""Indicates which field to sort by"""
enum PageSortField {
  PUBLISHED_AT
  RELEVANCE
  TITLE
}

"""Sort Pages by a field and direction."""
input PageSortInput {
  direction: SortDirection!
  field: PageSortField!
}

"""These are the tags associated to the page"""
type PageTags {
  """Get parsed, and optionally filtered, tags for a Page."""
  parsed(
    """Optionally filter tags by category."""
    category: String

    """
    Optionally filter tags by key. If category is not provided, but key is, category must be null to be returned.
    """
    key: String
  ): [ParsedTag]
  raw: [String]
}

"""A Map of several fields of Page and term aggregations for each"""
type PageTermAggregations {
  authors: [TermAggregation!]
  pageTypes: [TermAggregation!]
  tags: [TermAggregation!]
}

"""
These tags function in the opposite direction of other tags, allowing you to
choose several to focus on while displaying the content.
Commonly, these are used to filter or categorize content by providing options that match tags on the content itself.
"""
type PageTypeContentTags {
  """Get parsed, and optionally filtered, tags for a Page."""
  parsed(
    """Optionally filter tags by category."""
    category: String

    """
    Optionally filter tags by key. If category is not provided, but key is, category must be null to be returned.
    """
    key: String
  ): [ParsedTag]
  raw: [String!]
}

"""An up to 3-part tag, comma-separated, that has been parsed"""
type ParsedTag {
  """The category of the tag"""
  category: String

  """The key of the tag"""
  key: String

  """The value of the tag"""
  value: String!
}

"""Paginate through ProductContentItems"""
type ProductContentItemConnection {
  edges: [PublicProductContentItemEdge]!
  nodes: [PublicProductContentItem]!
  pageInfo: PageInfo!
}

"""Describes what type of content the contentItem is"""
enum ProductContentType {
  IMAGE
  VIDEO
}

"""
The number of results to return for each term aggregation. Defaults to 0 for each.
"""
input ProductNumberOfTermAggregationsInput {
  manufacturers: Int
  tags: Int
  vendors: Int
}

"""A product that is being recommended for a requested reason."""
type ProductRecommendation {
  """
  Get the product associated with the recommendation.
              
  Requires the publicproduct/read scope.
  """
  product: PublicProduct
  productId: ID!
}

"""Indicates which field to sort by, defaults to CREATED_AT"""
enum ProductSortField {
  CREATED_AT
  MSRP
  PRICE
  PUBLISHED_AT
  RELEVANCE
  TITLE
  UPDATED_AT
  VENDOR
}

"""Sort Products by a field and direction."""
input ProductSortInput {
  direction: SortDirection!
  field: ProductSortField!
}

"""Filter Products using StandardizedColor (Variant)."""
input ProductStandardizedColorFilterInput {
  operator: FilterOperator
  values: [VariantStandardizedColor!]!
}

"""These are the tags associated to the product"""
type ProductTags {
  """Get parsed, and optionally filtered, tags for a Product."""
  parsed(
    """Optionally filter tags by category."""
    category: String

    """
    Optionally filter tags by key. If category is not provided, but key is, category must be null to be returned.
    """
    key: String
  ): [ParsedTag]
  raw: [String]
}

"""A Map of several fields of Product and term aggregations for each"""
type ProductTermAggregations {
  manufacturers: [TermAggregation!]
  tags: [TermAggregation!]
  vendors: [TermAggregation!]
}

"""
A Collection is a group of products, what may often be referred to as a "Category Page" of some variety.
In reality, a collection is far more flexible and can be used to represent any
product grouping, and the collectionType can help differentiate between them.
"""
type PublicCollection {
  collectionId: ID!

  """
  Any string to declare a category of this collection, can be used to filter collections, limit 128 characters.
  """
  collectionType: String!

  """Get the content of the collection."""
  content: CollectionContent
  demandHqId: ID!

  """A short description of the collection, limit 1000 characters."""
  description: String

  """
  Get the description if it exists, or fallback to the excerpt of content for the collection.
  """
  descriptionOrExcerpt(
    """The number of characters to return, defaults to 200."""
    numberOfCharacters: Int
  ): String

  """
  This can be used to pin certain products to the top of a collection when using certain sorts.
  Max number of products is 20.
  """
  featuredProductIds: [ID]

  """
  A primary image url for this collection, can be generated from a Collection ContentItem.
  """
  primaryImageUrl: String

  """
  Paginate through products in a collection.
  
  Requires the publicproduct/read scope.
  """
  products(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int

    """Optionally filter by manufacturer."""
    manufacturer: [StringFilterInput]

    """Optionally filter by msrp."""
    msrp: FloatRangeFilterInput

    """
    The number of results to return for each term aggregation. Defaults to 0 for each.
    """
    numberOfTermAggregations: ProductNumberOfTermAggregationsInput

    """Optionally filter by price."""
    price: FloatRangeFilterInput

    """
    Query products for certain terms. Searches several fields, including
    product.tags, product.title, product.vendor, productLocales.description,
    productLocales.featureBullets, variant.barcode, variant.mpn, variant.sku
    """
    query: String

    """Filter Products using slugs"""
    slugs: [String]

    """
    Sort Products by a series of fields and directions, defaults to CREATED_AT/ASC.
    """
    sortOrder: [ProductSortInput]

    """Optionally filter by standardized color."""
    standardizedColor: [ProductStandardizedColorFilterInput]

    """Filter Products using Tag Prefixes (starts with)."""
    tagPrefixes: [StringFilterInput]

    """Filter Products using Tags."""
    tags: [StringFilterInput]

    """Optionally filter by vendor."""
    vendor: StringFilterInput
  ): PublicProductConnectionWithSearch!

  """
  ISO format date when the collection was published. Note that ensuing updates
  with status set to PUBLISHED will republish and re-set this date.
  """
  publishedAt: Date

  """
  A secondary image url for this collection, often a logo or related item.
  """
  secondaryImageUrl: String

  """Description specific for SEO purposes, limit 170 characters."""
  seoDescription: String

  """Title specific for SEO purposes, limit 256 characters."""
  seoTitle: String

  """Slug for the URL for this collection. Limit 128 characters."""
  slug: String!

  """The subtitle of the collection, limit 256 characters."""
  subtitle: String

  """Get the tags of the collection."""
  tags: CollectionTags

  """
  List TaxonomyBranches for a Collection.
  This is very highly likely to only return a single TaxonomyBranch, unless this is an unusual use case.
  
  Requires the publictaxonomybranch/read permission.
  """
  taxonomyBranches(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    taxonomyTree: String!
  ): PublicTaxonomyBranchConnection!

  """A tertiary image url for this collection, not often used."""
  tertiaryImageUrl: String

  """The title of the collection, limit 256 characters."""
  title: String!
}

"""Paginate through PublicCollections"""
type PublicCollectionConnectionWithSearch {
  edges: [PublicCollectionEdge]!
  nodes: [PublicCollection]!
  pageInfo: PageInfo!

  """
  This is an object with terms in the query as keys, and a suggestion for that
  term as the value. This is often referred to as 'Did you mean?'
  """
  querySuggestions: JSON

  """
  Values and the number of times they occur for the results of the query. These
  will be the same for every page of a query, and should only be fetched on the first page.
  """
  termAggregations: CollectionTermAggregations
}

"""One edge producing one PublicCollection Node"""
type PublicCollectionEdge {
  node: PublicCollection
}

"""
This holds content specific to a collectionType. This is generally used on a
page that lists all collections for a collectionType.
"""
type PublicCollectionTypeContent {
  collectionType: String!
  collectionTypeContentId: ID!

  """
  Get the markdown content of the collectionTypeContent as parsed HTML. Do not
  use this field without purifying or sanitizing the HTML in your webapp.
  """
  contentAsHtml: String
  contentAsString: String
  demandHqId: ID!

  """
  A short description of the collectionTypeContent, limit 1000 characters. This
  is typically used off of the collectionTypeContent page itself.
  """
  description: String

  """
  Get the description if it exists, or fallback to the excerpt of content for the CollectionTypeContent.
  """
  descriptionOrExcerpt(
    """The number of characters to return, defaults to 200."""
    numberOfCharacters: Int
  ): String

  """Get an excerpt of the CollectionTypeContent."""
  excerpt(
    """The number of characters to return, defaults to 200."""
    numberOfCharacters: Int
  ): String

  """
  Get the secondary markdown content of the collectionTypeContent as parsed
  HTML. Do not use this field without purifying or sanitizing the HTML in your webapp.
  """
  secondaryContentAsHtml: String
  secondaryContentAsString: String

  """Description specific for SEO purposes, limit 170 characters."""
  seoDescription: String

  """Title specific for SEO purposes, limit 256 characters."""
  seoTitle: String
  storefrontId: ID!

  """The subtitle of the collectionTypeContent, limit 256 characters."""
  subtitle: String

  """
  These tags function in the opposite direction of other tags, allowing you to
  choose several to focus on while displaying the content.
  Commonly, these are used to filter or categorize content by providing options that match tags on the content itself.
  """
  tags: CollectionTypeContentTags

  """The title of the collectionTypeContent, limit 256 characters."""
  title: String
}

"""Pagination object for PublicCollectionTypeContent."""
type PublicCollectionTypeContentConnection {
  edges: [PublicCollectionTypeContentEdge]!
  nodes: [PublicCollectionTypeContent]!
  pageInfo: PageInfo!
}

"""An edge containing a PublicCollectionTypeContent."""
type PublicCollectionTypeContentEdge {
  node: PublicCollectionTypeContent
}

"""
Nav is an item within a navigational heirarchy of some kind, most often viewed as a menu.
"""
type PublicNav {
  demandHqId: ID!

  """
  Where this Nav link should lead to. Can be an absolute or relative url. 768 character limit.
  """
  href: String!

  """The label for this Nav, limit 64 characters."""
  label: String!
  navId: ID!

  """
  A number, representing where this Nav resides in the heirarchy. Immutable, and
  limited to 0 through 6. 0 is the top level, 1 is the second level, etc.
  """
  navLevel: Int!

  """
  A string indicating the purpose of this Nav hierarchy, must match parentNav if applicable. Limit 128 characters.
  """
  navType: String!

  """
  List Child Navs for a Nav.
              
  Requires the publicnav/read permission.
  """
  navs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): PublicNavConnection!

  """All Navs besides the root (Level 0) have a parentNavId. Immutable."""
  parentNavId: ID

  """
  Where this Nav should be located with respect to other Navs. Need not be sequential or unique.
  """
  position: Int
  storefrontId: ID!
}

"""Paginate through PublicNavs"""
type PublicNavConnection {
  edges: [PublicNavEdge]!
  nodes: [PublicNav]!
  pageInfo: PageInfo!
}

"""One edge producing one Nav Node"""
type PublicNavEdge {
  node: PublicNav
}

"""
A Order is a part of the Demand Domain and represents a the basic information of a order.
Orders have many support entities, including variants, which represent SKUs of the order.
"""
type PublicOrder {
  billingAddress: Address!
  customerId: ID

  """A note provided by the customer at time of order"""
  customerNote: String
  demandHqId: ID!
  emailAddress: String!

  """
  List the items in an order.
              
  Requires the orderitem/read permission on the associated DemandHq.
  """
  items(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): PublicOrderItemConnection!
  note: String
  orderId: ID!

  """
  A reference to an outside payment gateway, used for tracking transactions. May be an orderID, or a paymentID.
  """
  paymentId: ID
  phoneNumber: String

  """
  ISO Date indicated when an order should be considered complete, closed for some changes, and started to process.
  """
  placedAt: Date
  shippingAddress: Address!
  shippingCharges: [OrderShippingCharge]

  """
  The status of the order currently, this field is read-only and can change many times over the course of the order
  """
  status: OrderStatus!
  storefrontId: ID

  """Get the tags of the order."""
  tags: OrderTags

  """
  List the transactions in an order.
              
  Requires the ordertransaction/read permission on the associated DemandHq.
  """
  transactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): PublicOrderTransactionConnection!
}

"""
Paginate through PublicOrders, name is indicative of future functionality.
"""
type PublicOrderConnectionWithSearch {
  edges: [PublicOrderEdge]!
  nodes: [PublicOrder]!
  pageInfo: PageInfo!
}

"""One edge producing one PublicOrder Node"""
type PublicOrderEdge {
  node: PublicOrder
}

"""An item in a PublicOrder."""
type PublicOrderItem {
  """The price of the OrderItem after adjustments."""
  adjustedPrice: Float!

  """The quantity of the OrderItem after adjustments."""
  adjustedQuantity: Int!
  adjustments: [OrderItemAdjustment]

  """
  The quantity of the OrderItem that has been assigned to a PurchaseOrderItem.
  """
  assignedQuantity: Int!
  barcode: String
  currency: ResonanceCurrency!
  customProperties: JSON
  deliveryMethod: VariantDeliveryMethod!
  demandHqId: ID!

  """
  The aggregate amount of all discounts applied to the OrderItem, can be subtracted from the subtotal directly.
  """
  discountTotal: Float!
  discounts: [OrderItemDiscount]

  """The quantity of the OrderItem that has been fulfilled."""
  fulfilledQuantity: Int!

  """
  The aggregate amount the consumer must pay for the item including price,
  quantity, adjustments, discounts, shippingCharges, and taxes.
  """
  grandTotal: Float!
  note: String
  orderId: ID!
  orderItemId: ID!
  productId: ID!
  productTitle: String!
  purchaseOrderItems: [OrderItemPurchaseOrderItem]
  quantity: Int!
  shippingCharges: [OrderShippingCharge]

  """
  The aggregate amount of all shipping charges applied to the OrderItem, can be added to the subtotal directly.
  """
  shippingChargesTotal: Float!
  shippingMethod: ShippingMethod
  sku: String
  status: OrderItemStatus!

  """
  The aggregate amount of all taxes applied to the OrderItem, can be added to the subtotal directly.
  """
  taxTotal: Float!
  taxes: [OrderItemTax]

  """Price per item, can be multiplied by quantity for total price"""
  unitPrice: Float!
  variantId: ID!
  variantTitle: String!
  vendor: String!
}

"""Paginate through OrderItems"""
type PublicOrderItemConnection {
  edges: [PublicOrderItemEdge]!
  nodes: [PublicOrderItem]!
  pageInfo: PageInfo!
}

"""One edge producing one PublicOrderItem Node"""
type PublicOrderItemEdge {
  node: PublicOrderItem
}

"""A transaction in a PublicOrder."""
type PublicOrderTransaction {
  amount: Float!
  authorizationCode: String
  authorizationExpiresAt: Date
  currency: ResonanceCurrency!
  currencyExchangeAdjustment: OrderTransactionCurrencyExchangeAdjustment
  demandHqId: ID!
  errorMessage: String
  gateway: OrderTransactionGateway!
  gatewayMessage: String
  gatewayTransactionId: ID
  orderId: ID!
  orderTransactionId: ID!
  orderTransactionType: OrderTransactionType!
  processedAt: Date
}

"""Paginate through OrderTransactions"""
type PublicOrderTransactionConnection {
  edges: [PublicOrderTransactionEdge]!
  nodes: [PublicOrderTransaction]!
  pageInfo: PageInfo!
}

"""One edge producing one PublicOrderTransaction Node"""
type PublicOrderTransactionEdge {
  node: PublicOrderTransaction
}

"""
A Page is a part of the Demand Domain and represents a page with textual and
image content on it, that has nothing to do with products.
This can range from "About Us" pages to Blog articles. Use the "pageType" field to differentiate.
Pages do not have locales specified, but since everything would be different
anyway, "pageType" can be a composite key with locale in it.
"""
type PublicPage {
  """The author of the page, limit 256 characters."""
  author: String

  """Get the content of the page."""
  content: PageContent
  demandHqId: ID!

  """A short description of the page, limit 1000 characters."""
  description: String

  """
  Get the description if it exists, or fallback to the content excerpt for the page.
  """
  descriptionOrExcerpt(
    """The number of characters to return, defaults to 200."""
    numberOfCharacters: Int
  ): String
  pageId: ID!

  """
  Any string to declare a category of this page, can be used to filter pages, limit 128 characters.
  """
  pageType: String!

  """
  A primary image url for this page, can be generated from a Page ContentItem.
  """
  primaryImageUrl: String

  """
  ISO format date when the page was published. Note that ensuing updates with
  status set to PUBLISHED will republish and re-set this date.
  """
  publishedAt: Date

  """A secondary image url for this page, often a logo or related item."""
  secondaryImageUrl: String

  """Title specific for SEO purposes, limit 256 characters."""
  seoTitle: String

  """Slug for the URL for this page. Limit 128 characters."""
  slug: String!

  """The subtitle of the page, limit 256 characters."""
  subtitle: String

  """Get the tags of the page."""
  tags: PageTags

  """A tertiary image url for this page, not often used."""
  tertiaryImageUrl: String

  """The title of the page, limit 256 characters."""
  title: String!
}

"""Paginate through PublicPages"""
type PublicPageConnectionWithSearch {
  edges: [PublicPageEdge]!
  nodes: [PublicPage]!
  pageInfo: PageInfo!

  """
  This is an object with terms in the query as keys, and a suggestion for that
  term as the value. This is often referred to as 'Did you mean?'
  """
  querySuggestions: JSON

  """
  Values and the number of times they occur for the results of the query. These
  will be the same for every page of a query, and should only be fetched on the first page.
  """
  termAggregations: PageTermAggregations
}

"""One edge producing one PublicPage Node"""
type PublicPageEdge {
  node: PublicPage
}

"""
This holds content specific to a pageType. This is generally used on a page that lists all pages for a pageType.
"""
type PublicPageTypeContent {
  """
  Get the markdown content of the pageTypeContent as parsed HTML. Do not use
  this field without purifying or sanitizing the HTML in your webapp.
  """
  contentAsHtml: String
  contentAsString: String
  demandHqId: ID!

  """
  A short description of the pageTypeContent, limit 1000 characters. This is
  typically used off of the pageTypeContent page itself.
  """
  description: String

  """
  Get the description if it exists, or fallback to the excerpt of content for the CollectionTypeContent.
  """
  descriptionOrExcerpt(
    """The number of characters to return, defaults to 200."""
    numberOfCharacters: Int
  ): String

  """Get an excerpt of the CollectionTypeContent."""
  excerpt(
    """The number of characters to return, defaults to 200."""
    numberOfCharacters: Int
  ): String
  pageType: String!
  pageTypeContentId: ID!

  """
  Get the secondary markdown content of the pageTypeContent as parsed HTML. Do
  not use this field without purifying or sanitizing the HTML in your webapp.
  """
  secondaryContentAsHtml: String
  secondaryContentAsString: String

  """Description specific for SEO purposes, limit 170 characters."""
  seoDescription: String

  """Title specific for SEO purposes, limit 256 characters."""
  seoTitle: String
  storefrontId: ID!

  """The subtitle of the pageTypeContent, limit 256 characters."""
  subtitle: String

  """
  These tags function in the opposite direction of other tags, allowing you to
  choose several to focus on while displaying the content.
  Commonly, these are used to filter or categorize content by providing options that match tags on the content itself.
  """
  tags: PageTypeContentTags

  """The title of the pageTypeContent, limit 256 characters."""
  title: String
}

"""Pagination object for PublicPageTypeContent."""
type PublicPageTypeContentConnection {
  edges: [PublicPageTypeContentEdge]!
  nodes: [PublicPageTypeContent]!
  pageInfo: PageInfo!
}

"""An edge containing a PublicPageTypeContent."""
type PublicPageTypeContentEdge {
  node: PublicPageTypeContent
}

"""
A Product is a part of the Demand Domain and represents a the basic information of a product.
Products have many support entities, including variants, which represent SKUs of the product.
"""
type PublicProduct {
  """
  Get a productContentItem for a product
  
  Requires productcontentitem/read permission on the requesting identity
  """
  contentItem(contentItemId: ID!): PublicProductContentItem

  """
  Get a list of productContentItems. The sort order is always by position.
  
  Requires productcontentitem/read permission on the DemandHq for the requesting identity.
  """
  contentItems(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    contentType: ProductContentType

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): ProductContentItemConnection
  demandHqId: ID!

  """
  Get a single productLocale by ResonanceLocaleType.
              
  Requires the "publicproductlocale/read" permission.
  """
  locale(localeType: ResonanceLocaleType!): PublicProductLocale

  """
  The labels for the possible option groups for this product, i.e. "Color", "Size", "Material", etc.
  These will match with labelOptions in Variants.
  """
  optionLabels: [String!]!

  """A short description of the product, limit 1000 characters."""
  productId: ID!

  """
  Get productMetrics for a Product
  
      Requires product/read permission
  """
  productMetrics: PublicProductMetrics

  """ISO format date when the product was published."""
  publishedAt: Date

  """Title specific for SEO purposes, limit 256 characters."""
  seoTitle: String

  """Slug for the URL for this product. Limit 128 characters."""
  slug: String!

  """Get the tags of the product."""
  tags: ProductTags

  """The title of the product, limit 256 characters."""
  title: String!

  """
  Get a single variant by VariantId
  
  Requires publicvariant/read permission on the requesting identity.
  """
  variant(variantId: ID): PublicVariant

  """
  Get a list of variants
  
  Requires publicvariant/read permission on the demandHq for the requesting identity.
  """
  variants(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): PublicVariantConnection!

  """The brand of the product, limit 256 characters."""
  vendor: String!
}

"""Paginate through PublicProducts"""
type PublicProductConnectionWithSearch {
  edges: [PublicProductEdge]!
  nodes: [PublicProduct]!
  pageInfo: PageInfo!

  """
  This is an object with terms in the query as keys, and a suggestion for that
  term as the value. This is often referred to as 'Did you mean?'
  """
  querySuggestions: JSON

  """
  Values and the number of times they occur for the results of the query. These
  will be the same for every page of a query, and should only be fetched on the first page.
  """
  termAggregations: ProductTermAggregations
}

"""
This has a many to one relationship with Product, and provides a connection to the CDN items.
"""
type PublicProductContentItem {
  alt: String
  category: String
  contentItemId: ID!

  """The key to the file in the CDN"""
  contentKey: String!
  contentType: ProductContentType!
  demandHqId: ID!

  """
  Used to determine what order the content comes out in.
  Positive Integers are allowed, up to 9,999,999,999, and it does not have to be unique or sequential.
  """
  position: Int
  productId: ID!
}

"""One edge producing one ProductContentItem Node"""
type PublicProductContentItemEdge {
  node: PublicProductContentItem
}

"""One edge producing one PublicProduct Node"""
type PublicProductEdge {
  node: PublicProduct
}

"""
This has a many to one relationship with Product, and provides localized language data for the appropriate fields.
There will often only be one of these, and it should be the one set in defaultLocale for the supplier.
"""
type PublicProductLocale {
  demandHqId: ID!

  """Can utilize Markdown"""
  description: String

  """Returns the product (productLocale) description as HTML."""
  descriptionAsHTML: String

  """Limited to 5 bullets"""
  featureBullets: [String]
  localeType: ResonanceLocaleType!
  productId: ID!
}

"""
Metrics for a PublicProduct including msrp min/max, price min/max, and discount metrics
"""
type PublicProductMetrics {
  """This number is mostly useful in tallying other numbers, averages, etc."""
  countOfVariants: Int!

  """The maximum discount for all of the variants"""
  discountMaximum: Float!

  """
  The maximum discount for all in stock variants (null if no variants are in stock)
  """
  discountMaximumInStock: Float

  """The minimum discount for all of the variants"""
  discountMinimum: Float!

  """
  The minimum discount for all in stock variants (null if no variants are in stock)
  """
  discountMinimumInStock: Float

  """The maximum discount percentage for all of the variants"""
  discountPercentageMaximum: Float!

  """
  The maximum discount percentage for all in stock variants (null if no variants are in stock)
  """
  discountPercentageMaximumInStock: Float

  """The minimum discount percentage for all of the variants"""
  discountPercentageMinimum: Float!

  """
  The minimum discount percentage for all in stock variants (null if no variants are in stock)
  """
  discountPercentageMinimumInStock: Float

  """In Stock if any Variant inventoryStatus is In Stock"""
  inventoryStatus: InventoryStatus!

  """The maximum MSRP from all of the variants"""
  msrpMaximum: Float!

  """
  The maximum MSRP from all in stock variants (null if no variants are in stock)
  """
  msrpMaximumInStock: Float

  """The minimum MSRP from all of the variants"""
  msrpMinimum: Float!

  """
  The minimum MSRP from all in stock variants (null if no variants are in stock)
  """
  msrpMinimumInStock: Float

  """The maximum price from all of the variants"""
  priceMaximum: Float!

  """
  The maximum price from all in stock variants (null if no variants are in stock)
  """
  priceMaximumInStock: Float

  """The minimum price from all of the variants"""
  priceMinimum: Float!

  """
  The minimum price from all in stock variants (null if no variants are in stock)
  """
  priceMinimumInStock: Float

  """All of the variants standardizedColors"""
  standardizedColors: [VariantStandardizedColor!]!

  """The standardizedColors of only in stock variants"""
  standardizedColorsInStock: [VariantStandardizedColor!]!
}

"""
A Storefront is the parent-most entity in the Storefront API, and represents the entire site.
"""
type PublicStorefront {
  demandHqId: ID!
  description: String
  name: String!
  storefrontId: ID!
  urlDomain: String!
}

"""
TaxonomyBranch is an item within a taxonomyTree that maps out a Product Taxonomy
hierarchy using Product Tags and Collections.
"""
type PublicTaxonomyBranch {
  """
  Get the collection for a taxonomy branch.
              
  Requires the publiccollection/read scope.
  """
  collection: PublicCollection

  """
  The collectionId associated with the TaxonomyBranch.
  Not required as a field, but is strongly suggested to be populated, and one is generally created with a TaxonomyBranch.
  """
  collectionId: ID
  createdAt: Date!
  demandHqId: ID!

  """
  The parent TaxonomyBranch for this TaxonomyBranch.
  
  Requires the publictaxonomybranch/read permission.
  """
  parentTaxonomyBranch: PublicTaxonomyBranch

  """
  All TaxonomyBranches besides the root have a parentTaxonomyBranchId. Immutable.
  """
  parentTaxonomyBranchId: ID

  """
  The product tag associated with this TaxonomyBranch, used for filtering or display matching.
  
  On a Root TaxonomyBranch, this is generally a taxPrefix that is used in all child TaxonomyBranches,
  i.e. "Taxonomy" for child branch productTags like "Taxonomy,Category,T-Shirts"
  """
  productTag: String!

  """
  The storefronts this taxonomyTree is published to.
  This is only present on the Root TaxonomyBranch of a taxonomyTree and applies to all child taxonomyBranches.
  """
  storefrontIds: [ID!]
  taxonomyBranchId: ID!

  """
  List Child TaxonomyBranches for a TaxonomyBranch.
              
  Requires the publictaxonomybranch/read permission.
  """
  taxonomyBranches(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): PublicTaxonomyBranchConnection!

  """The level of the TaxonomyBranch in the hierarchy. Immutable."""
  taxonomyLevel: TaxonomyLevel!

  """
  The tree this taxonomyBranch lies within. This has slug formatting (Lowercase, no spaces). Immutable.
  """
  taxonomyTree: String!

  """The name of the taxonomyBranch."""
  title: String!
  updatedAt: Date!
  updatedBy: ID!
}

"""Paginate through PublicTaxonomyBranches"""
type PublicTaxonomyBranchConnection {
  edges: [PublicTaxonomyBranchEdge]!
  nodes: [PublicTaxonomyBranch]!
  pageInfo: PageInfo!
}

"""One edge producing one TaxonomyBranch Node"""
type PublicTaxonomyBranchEdge {
  node: PublicTaxonomyBranch
}

"""
This is the child entity to a Product, and is a variation, such as a color, size, etc.
"""
type PublicVariant {
  """UPC, ISBN, GTIN, etc."""
  barcode: String

  """Quantity in one variant (i.e. 12-pack). Must be a positive integer."""
  casePack: Int

  """Associates contentItems with this variant"""
  contentItemIds: [ID]

  """
  Get a list of productContentItems for the variant.
  
  Requires productcontentitem/read permission on the DemandHq for the requesting identity.
  """
  contentItems: [PublicProductContentItem]
  deliveryMethod: VariantDeliveryMethod
  demandHqId: ID!

  """Often same as vendor, but not always."""
  manufacturer: String

  """Minimum Advertised Price. Must be a positive number."""
  mapPrice: Float

  """Manufacturer Part Number"""
  mpn: String

  """Manufacturer's Suggested Retail Price. Must be a positive number."""
  msrp: Float

  """
  An array of the option values that make up this variant.
  For example, a product with a color and size option would have two option values,
  one for each of the color and size options, i.e. ["Red", "Small"]
  Must have 1-3, and it should match the number of options in the product, but there is no validation to do so.
  Set this to "No Option" if you don't want to use options for this product and this is the only variant.
  See https://docs.buildresonance.com/concepts/products/#no-option-products for more info.
  """
  optionValues: [String!]!

  """
  Used to determine what order the content comes out in.
  Positive Integers are allowed, up to 9,999,999,999, and it does not have to be unique or sequential.
  """
  position: Int

  """Price for the defaultCurrency, can be any positive float number value."""
  price: Float

  """
  Get the product associated with the variant.
              
  Requires the publicproduct/read scope.
  """
  product: PublicProduct
  productId: ID!
  shippingDimensions: VariantShippingDimensions

  """Stock Keeping Unit"""
  sku: String
  standardizedColor: VariantStandardizedColor

  """Sales Tax Related Code, can match your chosen sales tax provider"""
  taxCode: String

  """Get the title of this variant (combo of optionValues)"""
  title: String!
  variantId: ID!

  """
  Get variantMetrics for a Variant
              
      Requires variant/read permission
  """
  variantMetrics: PublicVariantMetrics
  weight: VariantWeight
}

"""Paginate through Variants"""
type PublicVariantConnection {
  edges: [PublicVariantEdge]!
  nodes: [PublicVariant]!
  pageInfo: PageInfo!
}

"""One edge producing one Variant Node"""
type PublicVariantEdge {
  node: PublicVariant
}

"""
Metrics for a PublicVariant, including inventory quantity, status, and supplierVariant counts
"""
type PublicVariantMetrics {
  countOfInStockSupplierVariants: Int!
  countOfSupplierVariants: Int!

  """
  This is mostly useful for determining whether a certain quantity can be added
  to the cart. For BOTTOMLESS InventoryPolicy, a value of 10,000,000 is added here.
  """
  inventoryQuantity: Int!

  """If any SupplierVariant is in stock, this is in stock."""
  inventoryStatus: InventoryStatus!
}

"""A fulfillment on a PurchaseOrderItem."""
type PurchaseOrderItemFulfillment {
  fulfilledAt: Date!
  fulfilledQuantity: Int!
  shippingCarrier: String!
  trackingNumber: String!
}

"""Indicates the status of an PurchaseOrderItem (Supply)."""
enum PurchaseOrderItemStatus {
  """
  Indicates that the PurchaseOrderItem was assigned, but is no longer needed to be fulfilled.
  """
  CANCELLED

  """
  Indicates that the PurchaseOrderItem is fully fulfilled and is now complete.
  """
  FULFILLED

  """
  Indicates that the PurchaseOrderItem is ready for processing, and data is complete.
  """
  INITIAL
  PARTIALLY_ASSIGNED

  """
  Indicates that the PurchaseOrderItem is in the process of being fulfilled.
  """
  PARTIALLY_FULFILLED
}

"""The root query type for the Demand domain"""
type Query {
  """Nothing to see here, just a workaround for Apollo Server"""
  _empty: String

  """
  Returns the analytics url for the storefront, with which you can send Analytics Interactions to be ingested.
  """
  analyticsIngestionUrl: String

  """
  Get a collection by its slug.
  
  Requires the publiccollection/read scope.
  """
  collection(slug: String!): PublicCollection

  """
  Get a collectionTypeContent by collectionType.
                  
  Requires the collectiontypecontent/read scope on the associated DemandHq
  """
  collectionTypeContent(collectionType: String!): PublicCollectionTypeContent

  """
  Get all collectionTypeContents for a storefront.
              
  Requires the collectiontypecontent/read scope on the associated DemandHq
  """
  collectionTypeContents(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): PublicCollectionTypeContentConnection!

  """
  List collections for a Storefront with optional filters.
              
  Requires the publiccollection/read scope.
  """
  collections(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Filter Collections using collectionType"""
    collectionType: StringFilterInput

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int

    """
    The number of results to return for each term aggregation. Defaults to 0 for each.
    """
    numberOfTermAggregations: CollectionNumberOfTermAggregationsInput

    """
    Query collections for certain terms. Searches several fields, including
    collection.description, collection.subtitle, collection.title, and
    collectionTags.
    """
    query: String

    """Filter Collections using slugs"""
    slugs: [String]

    """Sort Collections by a series of fields and directions."""
    sortOrder: [CollectionSortInput]

    """Filter Collections using Tag Prefixes (starts with)."""
    tagPrefixes: [StringFilterInput]

    """Filter Collections using Tags."""
    tags: [StringFilterInput]
  ): PublicCollectionConnectionWithSearch!

  """
  Get a Customer for a customer authentication token.
              
  Requires the publiccustomer/read scope and a valid customer authentication token.
  """
  customer(customerToken: String!): Customer

  """
  The cart for the currently logged in customer. Will create a blank cart if one does not exist, never returns null.
              
  Requires the publiccart/read scope and a valid customer authentication token.
  """
  customerCart(customerToken: String!): Cart!

  """
  Get the checkout for a customer.
              
  Requires the publiccheckout/read scope and a valid customerToken.
  """
  customerCheckout(customerToken: String!): Checkout

  """
  The cart for an anonymous user. Will create a blank cart if one does not exist, never returns null.
              
  Requires the publiccart/read scope.
  """
  deviceCart(deviceId: String!): Cart!

  """Returns the health of the service"""
  health: String

  """
  List Navs.
              
  Requires the publicnav/read permission.
  """
  navs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int
    href: String
    hrefPrefix: String

    """Returns the last n elements from the list."""
    last: Int
    navIds: [ID]
    navLevel: Int
    navType: String
  ): PublicNavConnection!

  """
  Get a order by its orderId.
  
  Requires the publicorder/read scope.
  """
  order(customerToken: String!, orderId: ID!): PublicOrder

  """
  Paginate through orders.
  
  Requires the publicorder/read scope.
  """
  orders(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    customerToken: String!

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): PublicOrderConnectionWithSearch!

  """
  Get a page by its slug.
  
  Requires the publicpage/read scope.
  """
  page(slug: String!): PublicPage

  """
  Get a pageTypeContent by pageType.
                  
  Requires the pagetypecontent/read scope on the associated DemandHq
  """
  pageTypeContent(pageType: String!): PublicPageTypeContent

  """
  Get all pageTypeContents for a storefront.
              
  Requires the pagetypecontent/read scope on the associated DemandHq
  """
  pageTypeContents(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): PublicPageTypeContentConnection!

  """
  List pages for a Storefront with optional filters.
              
  Requires the publicpage/read scope.
  """
  pages(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Filter Pages using author"""
    author: StringFilterInput

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int

    """
    The number of results to return for each term aggregation. Defaults to 0 for each.
    """
    numberOfTermAggregations: PageNumberOfTermAggregationsInput

    """Filter Pages using pageType"""
    pageType: StringFilterInput

    """
    Query pages for certain terms. Searches several fields, including
    page.author, page.description, page.subtitle, page.title, pageTags, and the
    actual content of the page.
    """
    query: String

    """Filter Pages using slugs"""
    slugs: [String]

    """Sort Pages by a series of fields and directions."""
    sortOrder: [PageSortInput]

    """Filter Pages using Tag Prefixes (starts with)."""
    tagPrefixes: [StringFilterInput]

    """Filter Pages using Tags."""
    tags: [StringFilterInput]
  ): PublicPageConnectionWithSearch!

  """
  Get a product by its slug.
  
  Requires the publicproduct/read scope.
  """
  product(slug: String!): PublicProduct

  """
  Paginate through products.
  
  Requires the publicproduct/read scope.
  """
  products(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int

    """Optionally filter by manufacturer."""
    manufacturer: [StringFilterInput]

    """Optionally filter by msrp."""
    msrp: FloatRangeFilterInput

    """
    The number of results to return for each term aggregation. Defaults to 0 for each.
    """
    numberOfTermAggregations: ProductNumberOfTermAggregationsInput

    """Optionally filter by price."""
    price: FloatRangeFilterInput

    """
    Query products for certain terms. Searches several fields, including
    product.tags, product.title, product.vendor, productLocales.description,
    productLocales.featureBullets, variant.barcode, variant.mpn, variant.sku
    """
    query: String

    """Filter Products using slugs"""
    slugs: [String]

    """
    Sort Products by a series of fields and directions, defaults to CREATED_AT/ASC.
    """
    sortOrder: [ProductSortInput]

    """Optionally filter by standardized color."""
    standardizedColor: [ProductStandardizedColorFilterInput]

    """Filter Products using Tag Prefixes (starts with)."""
    tagPrefixes: [StringFilterInput]

    """Filter Products using Tags."""
    tags: [StringFilterInput]

    """Optionally filter by vendor."""
    vendor: StringFilterInput
  ): PublicProductConnectionWithSearch!

  """
  Recommend pages that are similar to a a customer's recent page activity.
  """
  recommendLikeRecentActivityPages(
    customerOrDeviceId: String!

    """The number of results to return. Max 100."""
    numberOfResults: Int!
  ): [PageRecommendation!]!

  """
  Recommend products that are similar to a a customer's recent product activity.
  """
  recommendLikeRecentActivityProducts(
    customerOrDeviceId: String!

    """The number of results to return. Max 100."""
    numberOfResults: Int!
  ): [ProductRecommendation!]!

  """Recommend pages that are similar to a given page(s)."""
  recommendMoreLikeThisPages(
    """The number of results to return. Max 100."""
    numberOfResults: Int!

    """
    The page(s) to find similar pages for. If this is provided, pageSlugs will be ignored.
    """
    pageIds: [ID!]

    """
    The page slug(s) to find similar pages for. If pageIds is not provided, this is required.
    """
    pageSlugs: [String!]
  ): [PageRecommendation!]!

  """Recommend products that are similar to a given product(s)."""
  recommendMoreLikeThisProducts(
    """The number of results to return. Max 100."""
    numberOfResults: Int!

    """
    The product(s) to find similar products for. If this is provided, productSlugs will be ignored.
    """
    productIds: [ID!]

    """
    The product slug(s) to find similar products for. If productIds is not provided, this is required.
    """
    productSlugs: [String!]
  ): [ProductRecommendation!]!

  """
  Recommend pages that have been recently viewed by a customer or device.
  """
  recommendRecentlyViewedPages(
    customerOrDeviceId: String!

    """The number of results to return. Max 100."""
    numberOfResults: Int!
  ): [PageRecommendation!]!

  """
  Recommend products that have been recently viewed by a customer or device.
  """
  recommendRecentlyViewedProducts(
    customerOrDeviceId: String!

    """The number of results to return. Max 100."""
    numberOfResults: Int!
  ): [ProductRecommendation!]!

  """
  Get the storefront associated with the requesting storefront identity.
              
  Requires the "publicstorefront/read" permission.
  """
  storefront: PublicStorefront

  """
  List TaxonomyBranches.
              
  Requires the publictaxonomybranch/read permission.
  """
  taxonomyBranches(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int
    href: String
    hrefPrefix: String

    """Returns the last n elements from the list."""
    last: Int
    taxonomyBranchIds: [ID]
    taxonomyBranchLevel: TaxonomyLevel
    taxonomyBranchType: String
  ): PublicTaxonomyBranchConnection!
}

"""Used throughout the app to give a currency to price information"""
enum ResonanceCurrency {
  USD
}

"""
Used throughout the app to indicate what language and locality a given text is in
"""
enum ResonanceLocaleType {
  EN_US
}

"""
This is an item being saved for later, waiting for a future purchase day.
"""
type SavedForLaterItem {
  position: Int

  """
  The variant that this saved for later item is associated with.
              
  Requires publicvariant/read permission on the requesting identity.
  """
  variant: PublicVariant
  variantId: ID!
}

"""This input type is used to add or update items in savedForLater."""
input SavedForLaterItemInput {
  position: Int
  variantId: ID!
}

"""The speed with which this variant gets delivered. Defaults to GROUND."""
enum ShippingMethod {
  GROUND
  OVERNIGHT
  THREE_DAY
  TWO_DAY
}

"""Indicates which direction to sort, defaults to ASC"""
enum SortDirection {
  ASC
  DESC
}

"""Filter using a combination of operator and an array of string values"""
input StringFilterInput {
  operator: FilterOperator
  values: [String!]!
}

"""The level of the TaxonomyBranch in the hierarchy."""
enum TaxonomyLevel {
  """
  The second most outer categorization for a Product, generally describing a
  broad, but slightly refined grouping of products.
  "Clothing", "Shoes", "Computers", "TVs"
  """
  CATEGORY

  """
  The outermost categorization for a Product, generally describing a very broad grouping.
  "Apparel", "Electronics", "Home & Garden"
  """
  DEPARTMENT

  """
  Only a single TaxonomyBranch can live at this level, and it is the basis for the entire taxonomyTree.
  """
  ROOT

  """
  The third most outer categorization for a Product, generally describing a specific grouping of products.
  "T-Shirts", "Jeans", "Sneakers", "Laptops", "Smartphones"
  """
  SUBCATEGORY1

  """
  An additional Subcategory level for a Product, generally describing a very specific grouping of products.
  """
  SUBCATEGORY2

  """
  An additional Subcategory level for a Product, generally describing a very, very specific grouping of products.
  """
  SUBCATEGORY3
}

"""
Indicates the key of the term aggregation, and approximately how many documents it occurs in. 
"""
type TermAggregation {
  docCount: Int!
  key: String!
}

"""The result of validating a checkout"""
type ValidateCheckoutResponse {
  checkout: Checkout!

  """A list of errors that occurred during validation, if any."""
  errors: [CheckoutError]
}

"""How this variant gets delivered. Defaults to SHIPPING."""
enum VariantDeliveryMethod {
  EMAIL
  SHIPPING
}

"""Metric or Standard Dimension?"""
enum VariantShippingDimensionUnit {
  CM
  IN
}

"""Object to indicate all three shipping box dimensions and a unit"""
type VariantShippingDimensions {
  height: Float!
  length: Float!
  unit: VariantShippingDimensionUnit!
  width: Float!
}

"""Indicates a standardized color for a variant, i.e. Blue for 'Topaz'"""
enum VariantStandardizedColor {
  BEIGE
  BLACK
  BLUE
  BRONZE
  BROWN
  CLEAR
  GOLD
  GRAY
  GREEN
  MULTICOLOR
  OFFWHITE
  ORANGE
  PINK
  PURPLE
  RED
  SILVER
  WHITE
  YELLOW
}

"""Object to indicate both amount and unit of weight."""
type VariantWeight {
  amount: Float!
  unit: VariantWeightUnit!
}

"""Metric or Standard Weight?"""
enum VariantWeightUnit {
  GRAMS
  LBS
}