"""
The response recieved when an app is installed or the permissions are updated
"""
type AppInstallationOutput {
  supplierIdentities: [SupplierIdentity]!
}

"""What stage and availability the app is in"""
enum AppStatus {
  """The app is in the process of being created"""
  DRAFT

  """The app is available to install, but only through shared links"""
  PRIVATE

  """The app is available to install, and is searchable/discoverable"""
  PUBLIC
}

"""
This is the primary determination of which permission scopes can be requested.
An app cannot be more than one of these.
If something cross domain needs to exist, it should be two apps and they can communicate.
"""
enum AppType {
  DEMANDHQAPP
  STOREFRONTAPP
  SUPPLIERAPP
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

"""The root mutation type for the Supply domain"""
type Mutation {
  """Nothing to see here, just a workaround for Apollo Server"""
  _makeEmpty(id: String): String

  """Create a new supplier"""
  createSupplier(input: SupplierCreateInput!): Supplier!

  """
  Add a new SupplierIdentity to a Supplier (give a user permissions)
  
  Requires the supplieridentity/write permission on the given Supplier
  """
  createSupplierIdentity(input: SupplierIdentityCreateInput!): SupplierIdentity

  """Create a new SupplierProduct"""
  createSupplierProduct(input: SupplierProductCreateInput!): SupplierProduct!

  """Create an Image SupplierProductContentItem from a File"""
  createSupplierProductImageFromFile(input: SupplierProductImageFromFileInput): SupplierProductImageFromFileResponse

  """Create an Image SupplierProductContentItem from a URL"""
  createSupplierProductImageFromUrl(input: SupplierProductImageFromUrlInput): SupplierProductContentItem

  """Create a new supplierProductLocale"""
  createSupplierProductLocale(input: SupplierProductLocaleCreateInput!): SupplierProductLocale

  """Create a new supplierVariant"""
  createSupplierVariant(input: SupplierVariantCreateInput!): SupplierVariant

  """Create a new supplierVariantSupplement"""
  createSupplierVariantSupplement(input: SupplierVariantSupplementCreateInput!): SupplierVariantSupplement

  """Create a subscription for a supply event."""
  createSupplyEventSubscription(input: SupplyEventSubscriptionCreateInput!): SupplyEventSubscription!

  """
  Remove a SupplierIdentity from a Supplier (remove user permissions)
  
  Requires the supplieridentity/write permission on the given Supplier
  """
  deleteSupplierIdentity(identityId: ID!, supplierId: ID!): SupplierIdentityDeleteOutput

  """Delete an existing SupplierProductContentItem"""
  deleteSupplierProductContentItem(input: SupplierProductContentItemDeleteInput): SupplierProductContentItemDeleteResponse!

  """Delete specified keys from the SupplierProductCustomData"""
  deleteSupplierProductCustomData(keysToDelete: [String!]!, supplierProductId: ID!): SupplierProductCustomData!

  """Delete a supplierVariant"""
  deleteSupplierVariant(supplierVariantId: ID!): SupplierVariantDeleteResponse!

  """Delete specified keys from the SupplierVariantCustomData"""
  deleteSupplierVariantCustomData(keysToDelete: [String!]!, supplierVariantId: ID!): SupplierVariantCustomData!

  """Delete a subscription for a supply event."""
  deleteSupplyEventSubscription(eventSubscriptionId: ID!): SupplyEventSubscriptionDeleteResponse!

  """
  Install an app to a Supplier (give an app permissions)
  
  Requires the supplieridentity/write permission on the given Supplier
  """
  installApp(appId: ID!, supplierId: ID!): AppInstallationOutput!

  """
  Update an app's permissions on a Supplier. This is a no-op if the app's
  requested permissions are the same as the current permissions.
  
  Requires the supplieridentity/write permission on the given Supplier
  """
  updateAppPermissions(appId: ID!, supplierId: ID!): AppInstallationOutput!

  """Update an existing supplier"""
  updateSupplier(input: SupplierUpdateInput!): Supplier!

  """
  Update a SupplierIdentity for a Supplier (give a user permissions)
  
  Requires the supplieridentity/write permission on the given Supplier
  """
  updateSupplierIdentity(input: SupplierIdentityUpdateInput!): SupplierIdentity

  """Update an existing SupplierProduct"""
  updateSupplierProduct(input: SupplierProductUpdateInput!): SupplierProduct!

  """Update an existing SupplierProductContentItem"""
  updateSupplierProductContentItem(input: SupplierProductContentItemUpdateInput): SupplierProductContentItem

  """Update an existing supplierProductLocale"""
  updateSupplierProductLocale(input: SupplierProductLocaleUpdateInput!): SupplierProductLocale

  """Update an existing supplierVariant"""
  updateSupplierVariant(input: SupplierVariantUpdateInput!): SupplierVariant

  """Update an existing supplierVariantSupplement"""
  updateSupplierVariantSupplement(input: SupplierVariantSupplementUpdateInput!): SupplierVariantSupplement

  """Add or update keys in the SupplierProductCustomData"""
  upsertSupplierProductCustomData(input: SupplierProductCustomDataUpsertInput!): SupplierProductCustomData!

  """Add or update keys in the SupplierVariantCustomData"""
  upsertSupplierVariantCustomData(input: SupplierVariantCustomDataUpsertInput!): SupplierVariantCustomData!
}

"""Information on Pagination"""
type PageInfo {
  """
  The cursor to use when paginating forwards (using first/after). Will always be
  populated regardless of if a next page exists.
  """
  endCursor: String

  """
  Whether or not using the endCursor will result in more results. Always
  populated, but will always be false when paginating using last/before.
  """
  hasNextPage: Boolean!

  """
  Whether or not using the startCursor will result in more results. Always
  populated, but will always be false when paginating using first/after.
  """
  hasPreviousPage: Boolean!

  """
  The cursor to use when paginating backwards (using last/before). Will always
  be populated regardless of if a previous page exists
  """
  startCursor: String
}

"""
This type is returned on routes with no permissions attached to protect
Personally Identifiable Information, but still provide minimal data.
Provides a subset of App from the Identity domain.
"""
type PublicApp {
  appClientIds: [ID!]!
  appId: ID!
  appType: AppType!
  description: String
  name: String!
  partnerId: ID!
  requestedScopes: [String]
  status: AppStatus!
}

"""
This type is returned on routes with no permissions attached to protect
Personally Identifiable Information, but still provide minimal data.
Can be a User or AppClient.
"""
type PublicIdentity {
  displayName: String!

  """A userName or appClientId"""
  identityId: ID!
}

"""
This type is the extension of SupplierIdentity's identityParentEntityId into the Public version of the entity,
and encompasses all possible uses of that field.
Currently, this is for Apps only.
"""
union PublicIdentityParent = PublicApp

"""
The full notification object. Endpoint may vary based on type, but is always a string (url, email,etc).
"""
type PurchaseOrderNotification {
  endpoint: String!
  type: PurchaseOrderNotificationType!
}

"""Exactly like PurchaseOrderNotification"""
input PurchaseOrderNotificationInput {
  endpoint: String!
  type: PurchaseOrderNotificationType!
}

"""Used to determine how a supplier recieves Purchase Orders"""
enum PurchaseOrderNotificationType {
  WEBHOOK
}

"""The root query type for the Supply domain"""
type Query {
  """Nothing to see here, just a workaround for Apollo Server"""
  _empty: String

  """See changes that have been made to this SupplierVariant"""
  events(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """The entity to retrieve events for, like a SupplierVariantId"""
    entityId: ID!

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int

    """The SupplierId to retrieve events for"""
    supplierId: ID!
  ): SupplyEventConnection!

  """
  Get a single supplier by SupplierId
  
  Requires supplier/read permission on the requesting identity
  """
  supplier(supplierId: ID!): Supplier

  """
  Get a filtered list of SupplierIdentities
  
  All of the filters are optional, but you must include at least one.
  You may receive less supplierIdentities than you indicate if you do not have
  permission to read part of the result set.
  
  Not all filter combinations are valid, for example you cannot filter by
  - identityId + identityParentEntityId (requires supplierId)
  - identityType only (requires supplierId)
  
  Requires supplieridentity/read permission on the requesting identity for each supplier requested,
  or you can request your own identities.
  """
  supplierIdentities(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """
    Filter the results to a specific identityId.
    Use this with your own userName or appClientId in order to see "My SupplierIdentities".
    You automatically have access to your own SupplierIdentities.
    """
    identityId: ID

    """Filter the results to a specific identityParentEntityId (optional)"""
    identityParentEntityId: ID

    """Filter the results to a specific identity type (optional)"""
    identityType: SupplierIdentityType

    """Returns the last n elements from the list."""
    last: Int

    """Filter the results to a specific supplierId (optional)"""
    supplierId: ID
  ): SupplierIdentityConnection!

  """
  Get a single SupplierIdentity.
  
  Requires supplieridentity/read permission on the requesting identity, or you can request your own identity.
  """
  supplierIdentity(identityId: ID!, supplierId: ID!): SupplierIdentity

  """
  Get a single SupplierProduct by its ID.
  
  Requires supplierproduct/read permission on the requesting identity
  """
  supplierProduct(supplierProductId: ID!): SupplierProduct

  """
  Get a single supplierVariant by SupplierVariantId
  
  Requires suppliervariant/read permission on the requesting identity
  """
  supplierVariant(supplierVariantId: ID!): SupplierVariant

  """
  Get a list of suppliers
  
  Requires supplier/read permission on each supplier for the requesting identity
  """
  suppliers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): SupplierConnection!

  """Get a supplyEventSubscription by id."""
  supplyEventSubscription(eventSubscriptionId: ID!): SupplyEventSubscription

  """List supplyEventSubscriptions by filtering."""
  supplyEventSubscriptions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    This filter should be used alone, including without relay parameters.
    It will supercede any other parameters.
    """
    eventSubscriptionIds: [ID!]

    """Returns the first n elements from the list."""
    first: Int

    """
    In order to use this filter, you must also provide subscriptionEntityId
    """
    itemType: String

    """Returns the last n elements from the list."""
    last: Int

    """In order to use this filter, you must also include itemType"""
    mutationType: SupplyEventMutationType

    """This filter can be used with or without subscriptionOwnerId"""
    subscriptionEntityId: ID

    """
    If you are not using eventSubscriptionIds, and are not querying for an identityId event subscription,
    this filter is highly recommended to use to ensure you have permissions on the returned eventSubscriptions.
    Otherwise, you may not have permissions on the returned eventSubscriptions, and see blank results.
    """
    subscriptionOwnerId: ID
  ): SupplyEventSubscriptionConnection!
}

"""Used throughout the app to give a currency to price information"""
enum ResonanceCurrency {
  USD
}

"""
Used throughout the app to indicate what language and locality a given text is in
"""
enum ResonanceLocaleType {
  EN_US
}

"""The parent-most entity of the Supplier Domain"""
type Supplier {
  createdAt: String!
  defaultCurrency: ResonanceCurrency!
  defaultLocaleType: ResonanceLocaleType!
  description: String

  """List supplyEventSubscriptions by filtering for your identity."""
  mySupplyEventSubscriptions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """
    In order to use this filter, you must also provide subscriptionEntityId
    """
    itemType: String

    """Returns the last n elements from the list."""
    last: Int

    """In order to use this filter, you must also include itemType"""
    mutationType: SupplyEventMutationType
  ): SupplyEventSubscriptionConnection!
  name: String!
  ownerUserName: String!

  """
  One purchaseOrderNotification must be present to publish (private or public)
  """
  purchaseOrderNotifications: [PurchaseOrderNotification!]
  status: SupplierStatus!
  supplierId: ID!

  """
  Provided through SupplierIdentity Chained Resolver
  Returns SupplierIdentities for the given Supplier
  
  Requires supplieridentity/read permission on the requesting identity
  """
  supplierIdentities(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Filter the results to a specific identityParentEntityId (optional)"""
    identityParentEntityId: ID

    """Filter the results to a specific identity type (optional)"""
    identityType: SupplierIdentityType

    """Returns the last n elements from the list."""
    last: Int
  ): SupplierIdentityConnection!

  """
  Provided through SupplierIdentity Chained Resolver
  Returns a single SupplierIdentity for the given Supplier
  
  Requires supplieridentity/read permission on the requesting identity, or you can request your own identity.
  """
  supplierIdentity(identityId: ID!): SupplierIdentity

  """
  Get a single SupplierProduct by its ID.
  
  Requires supplierproduct/read permission on the requesting identity
  """
  supplierProduct(supplierProductId: ID!): SupplierProduct

  """
  List SupplierProducts for a Supplier.
  
  Requires supplierproduct/read permission on the requesting identity
  """
  supplierProducts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): SupplierProductConnection!
  updatedAt: String!
  updatedBy: ID!
}

"""Paginate through Suppliers"""
type SupplierConnection {
  edges: [SupplierEdge]!
  nodes: [Supplier]!
  pageInfo: PageInfo!
}

"""The necessary fields in order to create a new supplier"""
input SupplierCreateInput {
  defaultCurrency: String!
  defaultLocaleType: ResonanceLocaleType!
  description: String
  name: String!
  purchaseOrderNotifications: [PurchaseOrderNotificationInput!]
}

"""One edge producing one Supplier Node"""
type SupplierEdge {
  node: Supplier
}

"""Indicates a User or App has permissions on a Supplier"""
type SupplierIdentity {
  """Could be a userName or an appClientId"""
  identityId: ID!
  identityParentEntityId: ID
  identityType: SupplierIdentityType!
  permissions: SupplierIdentityPermissions!
  publicIdentity: PublicIdentity
  publicIdentityParent: PublicIdentityParent
  supplierId: ID!
  updatedBy: String!
}

"""Paginate through SupplierIdentities"""
type SupplierIdentityConnection {
  edges: [SupplierIdentityEdge]!
  nodes: [SupplierIdentity]!
  pageInfo: PageInfo!
}

"""
Exactly like SupplierIdentity, but no updatedBy or identityType (always User)
"""
input SupplierIdentityCreateInput {
  """Always a user's userName (not appClientId)"""
  identityId: ID!
  identityParentEntityId: ID

  """Should always be USER"""
  identityType: SupplierIdentityType!
  permissions: SupplierIdentityPermissionsInput!
  supplierId: ID!
}

"""Returned object from deleteSupplierIdentity"""
type SupplierIdentityDeleteOutput {
  deletedId: SupplierIdentityDeletedId
}

"""The deleted IDs identifying the SupplierIdentity"""
type SupplierIdentityDeletedId {
  identityId: ID!
  supplierId: ID!
}

"""One edge producing one SupplierIdentity Node"""
type SupplierIdentityEdge {
  node: SupplierIdentity
}

"""
Indicates which permissions this Identity possesses on a given Supplier
"""
type SupplierIdentityPermissions {
  roles: [String]!
  scopes: [String]!
}

"""Exactly like SupplierIdentityPermissions"""
input SupplierIdentityPermissionsInput {
  roles: [String]!
  scopes: [String]!
}

"""Indicates whether the user type is an app or human user"""
enum SupplierIdentityType {
  APPCLIENT
  USER
}

"""
ID Fields are required, but all other fields are optional, only included fields will be updated.
"""
input SupplierIdentityUpdateInput {
  """Always a user's userName (not appClientId)"""
  identityId: ID!

  """Should always be USER"""
  identityType: SupplierIdentityType
  permissions: SupplierIdentityPermissionsInput
  supplierId: ID!
}

"""
This is the main entity of the Supplier domain, and is used to represent a product, which is a group of SKUs.
SKUs are represented by SupplierVariants, a child of this entity.
This entity is less frequently updated, it is more likely that SupplyVariant will be updated frequently.
"""
type SupplierProduct {
  """
  Get a supplierProductContentItem for a supplierProduct
  
  Requires supplierproductcontentitem/read permission on the requesting identity
  """
  contentItem(contentItemId: ID!): SupplierProductContentItem

  """
  Get a list of supplierProductContentItems
  
  Requires supplierproductcontentitem/read permission on the supplier for the requesting identity
  """
  contentItems(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): SupplierProductContentItemConnection!
  createdAt: String!
  customData: SupplierProductCustomData

  """
  Passed along in PurchaseOrders so the Supplier can identify items in their warehouse.
  """
  externalProductId: String!

  """
  Get a single supplierProductLocale by ResonanceLocaleType
  
  Requires supplierproductlocale/read permission on the requesting identity
  """
  locale(localeType: ResonanceLocaleType!): SupplierProductLocale

  """
  The labels for the options of this product, i.e. ["Color", "Size"]
  These will match with the order of the optionValues on the SupplierVariants.
  
  Must have 1-3, and it should match the number of options in the variants, but there is no validation to do so.
  """
  optionLabels: [String!]!

  """Indicates whether a product is live and able to be ordered."""
  status: SupplierProductStatus!

  """Reference to the Supplier that owns this product."""
  supplierId: ID!
  supplierProductId: ID!

  """
  Get a single supplierVariant by SupplierVariantId
  
  Requires suppliervariant/read permission on the requesting identity
  """
  supplierVariant(supplierVariantId: ID!): SupplierVariant

  """
  Get a list of supplierVariants
  
  Requires suppliervariant/read permission on the supplier for the requesting identity
  """
  supplierVariants(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): SupplierVariantConnection!

  """Categories and other groupings that apply to this product."""
  tags: [String]

  """The title of the product."""
  title: String!
  updatedAt: String!
  updatedBy: ID!

  """The brand or manufacturer of the product."""
  vendor: String!
}

"""Paginate through SupplierProducts"""
type SupplierProductConnection {
  edges: [SupplierProductEdge]!
  nodes: [SupplierProduct]!
  pageInfo: PageInfo!
}

"""
This has a many to one relationship with SupplierProduct, and provides a connection to the CDN items.
"""
type SupplierProductContentItem {
  alt: String!
  category: String
  contentItemId: ID!

  """The key to the file in the CDN"""
  contentKey: String!
  contentType: SupplierProductContentType!
  createdAt: String!

  """
  Used to determine what order the content comes out in.
  You can place any number here, including non-integers and negatives, and it does not have to be unique or sequential.
  """
  position: Float
  supplierId: ID!
  supplierProductId: ID!
  updatedAt: String!
  updatedBy: String!
}

"""Paginate through SupplierProductContentItems"""
type SupplierProductContentItemConnection {
  edges: [SupplierProductContentItemEdge]!
  nodes: [SupplierProductContentItem]!
  pageInfo: PageInfo!
}

"""Input object to delete a SupplierProductContentItem"""
input SupplierProductContentItemDeleteInput {
  contentItemId: ID!
  supplierProductId: ID!
}

"""The response type for deleteSupplierProductContentItem"""
type SupplierProductContentItemDeleteResponse {
  deletedId: SupplierProductContentItemDeletedId!
}

"""The returned object for deletedId for deleteSupplierProductContentItem"""
type SupplierProductContentItemDeletedId {
  contentItemId: ID!
  supplierProductId: ID!
}

"""One edge producing one SupplierProduct Node"""
type SupplierProductContentItemEdge {
  node: SupplierProductContentItem
}

"""Input object for updating an existing SupplierProductContentItem"""
input SupplierProductContentItemUpdateInput {
  alt: String
  category: String
  contentItemId: ID!

  """
  Used to determine what order the content comes out in.
  You can place any number here, including non-integers and negatives, and it does not have to be unique or sequential.
  """
  position: Float
  supplierProductId: ID!
}

"""Describes what type of content the entity is"""
enum SupplierProductContentType {
  IMAGE
  VIDEO
}

"""
The necessary fields to create a new SupplierProduct.
status will be initially set to DRAFT
"""
input SupplierProductCreateInput {
  """
  Passed along in PurchaseOrders so the Supplier can identify items in their warehouse.
  """
  externalProductId: String!

  """
  The labels for the options of this product, i.e. ["Color", "Size"]
  These will match with the order of the optionValues on the SupplierVariants.
  
  Must have 1-3, and it should match the number of options in the variants, but there is no validation to do so.
  """
  optionLabels: [String!]!

  """Reference to the Supplier that owns this product."""
  supplierId: ID!

  """Categories and other groupings that apply to this product."""
  tags: [String]

  """The title of the product."""
  title: String!

  """The brand or manufacturer of the product."""
  vendor: String!
}

"""
Data that doesn't fit in the provided SupplierProduct fields needs to live here.
"""
type SupplierProductCustomData {
  createdAt: String!
  data: JSONObject!
  supplierProductId: ID!
  updatedAt: String!
  updatedBy: String!
}

"""
The input type to upsert SupplierProductCustomData.
The data object is required, but is a partial update, and keys not mentioned will be left alone.
"""
input SupplierProductCustomDataUpsertInput {
  data: JSONObject!
  supplierProductId: ID!
}

"""One edge producing one SupplierProduct Node"""
type SupplierProductEdge {
  node: SupplierProduct
}

"""
Input object for creating an Image SupplierProductContentItem from a File on a device
"""
input SupplierProductImageFromFileInput {
  alt: String!
  category: String
  fileExtension: String!
  fileName: String!

  """
  Used to determine what order the content comes out in.
  You can place any number here, including non-integers and negatives, and it does not have to be unique or sequential.
  """
  position: Float
  supplierId: ID!
  supplierProductId: ID!
}

"""The response object from createSupplierProductImageFromFile"""
type SupplierProductImageFromFileResponse {
  contentItem: SupplierProductContentItem!
  fields: JSONObject!
  url: String!
}

"""
Input object for creating an Image SupplierProductContentItem from a URL
"""
input SupplierProductImageFromUrlInput {
  alt: String!
  category: String

  """
  Used to determine what order the content comes out in.
  You can place any number here, including non-integers and negatives, and it does not have to be unique or sequential.
  """
  position: Float
  supplierId: ID!
  supplierProductId: ID!
  url: String!
}

"""
This has a many to one relationship with SupplierProduct, and provides localized language data for the appropriate fields.
There will often only be one of these, and it should be the one set in defaultLocale for the supplier.
"""
type SupplierProductLocale {
  createdAt: String!
  description: String

  """Limited to 5 bullets"""
  featureBullets: [String]
  isDefault: Boolean!
  localeType: ResonanceLocaleType!
  supplierId: ID!
  supplierProductId: ID!
  updatedAt: String!
  updatedBy: String!
}

"""The necessary fields in order to create a new supplierProductLocale"""
input SupplierProductLocaleCreateInput {
  description: String
  featureBullets: [String]
  isDefault: Boolean!
  localeType: ResonanceLocaleType!
  supplierId: ID!
  supplierProductId: ID!
}

"""
The necessary fields in order to update a supplierProductLocale.
ID fields are required, others are optional, only included fields will be updated.
"""
input SupplierProductLocaleUpdateInput {
  description: String

  """Limited to 5 bullets"""
  featureBullets: [String]
  isDefault: Boolean
  localeType: ResonanceLocaleType!
  supplierProductId: ID!
}

"""Indicates whether a product is live and able to be ordered"""
enum SupplierProductStatus {
  ARCHIVED
  DRAFT
  PUBLISHED
}

"""
The necessary and optional fields to update an existing SupplierProduct.
If status is set to Publish, additional validation will be performed.
"""
input SupplierProductUpdateInput {
  """
  Passed along in PurchaseOrders so the Supplier can identify items in their warehouse.
  """
  externalProductId: String

  """
  The labels for the options of this product, i.e. ["Color", "Size"]
  These will match with the order of the optionValues on the SupplierVariants.
  
  Must have 1-3, and it should match the number of options in the variants, but there is no validation to do so.
  """
  optionLabels: [String!]
  supplierProductId: ID!

  """Categories and other groupings that apply to this product."""
  tags: [String]

  """The title of the product."""
  title: String

  """The brand or manufacturer of the product."""
  vendor: String
}

"""Indication of whether the Supplier is live and accepting orders"""
enum SupplierStatus {
  """Indicates a Supplier's goods are no longer available for retailing."""
  ARCHIVED

  """
  Indicates that a Supplier's goods are not yet available for retailing. Functionally identical to ARCHIVED.
  """
  DRAFT

  """
  Indicates that a Supplier is activated and available, but not in the public Supplier Marketplace.
  """
  PRIVATE

  """
  Indicates that a Supplier is not only activated, but available in the public Supplier Marketplace.
  """
  PUBLIC
}

"""
The possible fields in order to update a supplier. Partial updating in place.
"""
input SupplierUpdateInput {
  description: String
  name: String
  purchaseOrderNotifications: [PurchaseOrderNotificationInput!]
  status: SupplierStatus
  supplierId: ID!
}

"""
The main item of the Supplier Domain, represents a single SKU of a product
Only the variant level exists, there is no parent product.
"""
type SupplierVariant {
  """Associates a contentItem with this variant"""
  contentItemId: ID
  createdAt: String!
  customData: SupplierVariantCustomData
  externalProductId: String!
  externalVariantId: String!
  inventoryPolicy: SupplierVariantInventoryPolicy!
  inventoryQuantity: Int!
  inventoryStatus: SupplierVariantInventoryStatus!

  """
  An array of the option values that make up this variant.
  For example, a product with a color and size option would have two option values,
  one for each of the color and size options, i.e. ["Red", "Small"]
  
  Must have 1-3, and it should match the number of options in the product, but there is no validation to do so.
  """
  optionValues: [String!]!

  """
  Get the supplierVariantSupplement for a supplierVariant
  
  Requires suppliervariantsupplement/read permission on the requesting identity
  """
  supplement: SupplierVariantSupplement
  supplierId: ID!
  supplierProductId: ID!
  supplierVariantId: ID!
  updatedAt: String!
  updatedBy: String!
  variantTitle: String!
}

"""Paginate through SupplierVariants"""
type SupplierVariantConnection {
  edges: [SupplierVariantEdge]!
  nodes: [SupplierVariant]!
  pageInfo: PageInfo!
}

"""The necessary fields in order to create a new supplierVariant"""
input SupplierVariantCreateInput {
  """Associates a contentItem with this variant"""
  contentItemId: ID
  externalVariantId: String!
  inventoryPolicy: SupplierVariantInventoryPolicy!
  inventoryQuantity: Int!

  """
  An array of the option values that make up this variant.
  For example, a product with a color and size option would have two option values,
  one for each of the color and size options, i.e. ["Red", "Small"]
  
  Limit 3, and it should match the number of options in the product, but there is no constraint to do so.
  """
  optionValues: [String!]!
  supplierId: ID!
  supplierProductId: ID!
}

"""
Data that doesn't fit in the provided SupplierVariant fields needs to live here.
"""
type SupplierVariantCustomData {
  createdAt: String!
  data: JSONObject!
  supplierVariantId: ID!
  updatedAt: String!
  updatedBy: String!
}

"""
The input type to upsert SupplierVariantCustomData.
The data object is required, but is a partial update, and keys not mentioned will be left alone.
"""
input SupplierVariantCustomDataUpsertInput {
  data: JSONObject!
  supplierVariantId: ID!
}

"""Response for when deleting a supplierVariant"""
type SupplierVariantDeleteResponse {
  deletedId: ID!
}

"""One edge producing one SupplierVariant Node"""
type SupplierVariantEdge {
  node: SupplierVariant
}

"""Object to indicate both amount and unit of handling cost."""
type SupplierVariantHandlingCost {
  amount: Float!
  unit: SupplierVariantHandlingCostUnit!
}

"""Input object to indicate both amount and unit of handling cost."""
input SupplierVariantHandlingCostInput {
  amount: Float!
  unit: SupplierVariantHandlingCostUnit!
}

"""Indicates what unit the amount is in"""
enum SupplierVariantHandlingCostUnit {
  """The amount is in a currency, i.e. $"""
  CURRENCY

  """The amount is a percentage of the Cost field"""
  PERCENTAGE_OF_COST
}

"""
Indicates how to handle inventory, whether a product should or can go out of stock
"""
enum SupplierVariantInventoryPolicy {
  BOTTOMLESS
  DEFAULT
}

"""Indicates whether a variant is in or out of stock"""
enum SupplierVariantInventoryStatus {
  INSTOCK
  OUTOFSTOCK
}

"""Metric or Standard Dimension?"""
enum SupplierVariantShippingDimensionUnit {
  CM
  IN
}

"""Object to indicate all three shipping box dimensions and a unit"""
type SupplierVariantShippingDimensions {
  height: Float!
  length: Float!
  unit: SupplierVariantShippingDimensionUnit!
  width: Float!
}

"""Input object to indicate all three shipping box dimensions and a unit"""
input SupplierVariantShippingDimensionsInput {
  height: Float!
  length: Float!
  unit: SupplierVariantShippingDimensionUnit!
  width: Float!
}

"""Indicates a standardized color for a variant, i.e. Blue for 'Topaz'"""
enum SupplierVariantStandardizedColor {
  BEIGE
  BLACK
  BLUE
  BRONZE
  BROWN
  CLEAR
  GOLD
  GRAY
  GREEN
  MULTICOLOR
  OFFWHITE
  ORANGE
  PINK
  PURPLE
  RED
  SILVER
  WHITE
  YELLOW
}

"""
This has a one to one relationship with SupplierVariant, and provides supplemental data for the SupplierVariant.
These items get updated at a lower frequency, and are therefore separate.
"""
type SupplierVariantSupplement {
  """
  A calculated metric for some kind of average for a common region. Uncommon.
  """
  averageShippingCost: Float

  """UPC, ISBN, GTIN, etc"""
  barcode: String!

  """Quantity in one variant (i.e. 12-pack)"""
  casePack: Int

  """COGS, or Cost of Goods Sold, in a currency"""
  cost: Float!

  """ISO Date"""
  createdAt: String!

  """Additional warehouse handling charge, typically for larger items."""
  handlingCost: SupplierVariantHandlingCost

  """
  Calculated field, giving the handling cost as Currency no matter how it is stored
  """
  handlingCostAsCurrency: Float
  isTaxable: Boolean

  """Often same as vendor, but not always."""
  manufacturer: String

  """Minimum Advertised Price"""
  mapPrice: Float

  """Manufacturer Part Number"""
  mpn: String

  """Manufacturer's Suggested Retail Price"""
  msrp: Float
  productTags: [String]

  """AKA Price"""
  recommendedPrice: Float
  shippingDimensions: SupplierVariantShippingDimensions

  """Stock Keeping Unit"""
  sku: String
  standardizedColor: SupplierVariantStandardizedColor
  supplierId: ID!
  supplierVariantId: ID!

  """ISO Date"""
  updatedAt: String!
  updatedBy: String!
  weight: SupplierVariantWeight
}

"""
The necessary fields in order to create a new supplierVariantSupplement
"""
input SupplierVariantSupplementCreateInput {
  """
  A calculated metric for some kind of average for a common region. Uncommon.
  """
  averageShippingCost: Float

  """UPC, ISBN, GTIN, etc"""
  barcode: String

  """Quantity in one variant (i.e. 12-pack)"""
  casePack: Int

  """COGS, or Cost of Goods Sold, in a currency"""
  cost: Float!

  """Additional warehouse handling charge, typically for larger items."""
  handlingCost: SupplierVariantHandlingCostInput
  isTaxable: Boolean

  """Often same as vendor, but not always."""
  manufacturer: String

  """Minimum Advertised Price"""
  mapPrice: Float

  """Manufacturer Part Number"""
  mpn: String

  """Manufacturer's Suggested Retail Price"""
  msrp: Float
  productTags: [String]

  """AKA Price"""
  recommendedPrice: Float
  shippingDimensions: SupplierVariantShippingDimensionsInput

  """Stock Keeping Unit"""
  sku: String
  standardizedColor: SupplierVariantStandardizedColor
  supplierId: ID!
  supplierVariantId: ID!
  weight: SupplierVariantWeightInput
}

"""
The necessary fields in order to update a supplierVariantSupplement.
ID fields required, all other fields optional, only included fields will be updated.
"""
input SupplierVariantSupplementUpdateInput {
  """
  A calculated metric for some kind of average for a common region. Uncommon.
  """
  averageShippingCost: Float

  """UPC, ISBN, GTIN, etc"""
  barcode: String

  """Quantity in one variant (i.e. 12-pack)"""
  casePack: Int

  """COGS, or Cost of Goods Sold, in a currency"""
  cost: Float

  """Additional warehouse handling charge, typically for larger items."""
  handlingCost: SupplierVariantHandlingCostInput
  isTaxable: Boolean

  """Often same as vendor, but not always."""
  manufacturer: String

  """Minimum Advertised Price"""
  mapPrice: Float

  """Manufacturer Part Number"""
  mpn: String

  """Manufacturer's Suggested Retail Price"""
  msrp: Float
  productTags: [String]

  """AKA Price"""
  recommendedPrice: Float
  shippingDimensions: SupplierVariantShippingDimensionsInput

  """Stock Keeping Unit"""
  sku: String
  standardizedColor: SupplierVariantStandardizedColor
  supplierId: ID!
  supplierVariantId: ID!
  weight: SupplierVariantWeightInput
}

"""
The necessary fields in order to update a supplierVariant.
ID fields are required, all other fields are optional, only included fields will be updated.
"""
input SupplierVariantUpdateInput {
  """Associates a contentItem with this variant"""
  contentItemId: ID
  externalVariantId: String
  inventoryPolicy: SupplierVariantInventoryPolicy
  inventoryQuantity: Int

  """
  An array of the option values that make up this variant.
  For example, a product with a color and size option would have two option values,
  one for each of the color and size options, i.e. ["Red", "Small"]
  
  Limit 3, and it should match the number of options in the product, but there is no constraint to do so.
  """
  optionValues: [String!]
  supplierVariantId: ID!
}

"""Object to indicate both amount and unit of weight."""
type SupplierVariantWeight {
  amount: Float!
  unit: SupplierVariantWeightUnit!
}

"""Input object to indicate both amount and unit of weight."""
input SupplierVariantWeightInput {
  amount: Float!
  unit: SupplierVariantWeightUnit!
}

"""Metric or Standard Weight?"""
enum SupplierVariantWeightUnit {
  GRAMS
  LBS
}

"""
Contains before and after snapshots for every event that occurs within the Supply domain
"""
type SupplyEvent {
  """
  This is the event data and metadata.
  The data is variable, but most typically contains a newItem and oldItem.
  """
  message: SupplyEventMessage

  """UUID"""
  messageId: String!

  """A human-friendly string summarizing the event"""
  subject: String

  """ISO Date that the event occurred"""
  timestamp: String!
}

"""Paginate through SupplyEvents"""
type SupplyEventConnection {
  edges: [SupplyEventEdge]!
  nodes: [SupplyEvent]!
  pageInfo: PageInfo!
}

"""One edge producing one SupplyEvent Node"""
type SupplyEventEdge {
  node: SupplyEvent
}

"""
This is the event data and metadata.
The data is variable, but most typically contains a newItem and oldItem.
"""
type SupplyEventMessage {
  """Variable, but most typically contains a newItem and oldItem."""
  data: JSONObject

  """Items consistent to every event"""
  metadata: SupplyEventMetadata
}

"""Items consistent to every event"""
type SupplyEventMetadata {
  domain: String!

  """This is most typically domainHqId or supplierId"""
  domainEntityId: String!
  entityId: String
  itemType: String
  mutationType: String
}

"""What type of event to listen for."""
enum SupplyEventMutationType {
  CREATED
  DELETED
  UPDATED
}

"""The protocol to use to supply the event."""
enum SupplyEventProtocol {
  """
  For internal use only. Permissions are difficult to setup for this protocol.
  """
  LAMBDA
}

"""Entity representing a subscription to supply events."""
type SupplyEventSubscription {
  createdAt: String!

  """Changes based on protocol, but indicates the exact target."""
  endpoint: String!
  eventSubscriptionId: ID!

  """The SupplyEntity to subscribe to, all lowercase."""
  itemType: String!

  """What type of event to listen for."""
  mutationType: SupplyEventMutationType!

  """The protocol to use to supply the event."""
  protocol: SupplyEventProtocol!

  """
  This is the "main" entity that is being subscribed to.
  
  This can either be a ResonanceDomainEntityId (SupplierId, DemandHqId) to subscribe to an entity to which they have access.
  This is useful to monitor things like changes to Products and such.
  
  Or an Identity (AppClientId, UserName) to subscribe to THEMSELF.
  This is useful to monitor things like app installations, uninstallations, and such.
  
  subscriptionEntityType indicates what type of entity this is.
  """
  subscriptionEntityId: ID!

  """This distinguishes between the types of subscriptions."""
  subscriptionEntityType: SupplyEventSubscriptionEntityType!

  """The app (not appClient) or user that owns the subscription."""
  subscriptionOwnerId: ID!
  updatedAt: String!
  updatedBy: ID!
}

"""Paginate through SupplyEventSubscriptions"""
type SupplyEventSubscriptionConnection {
  edges: [SupplyEventSubscriptionEdge]!
  nodes: [SupplyEventSubscription]!
  pageInfo: PageInfo!
}

"""The fields required to create an event subscription."""
input SupplyEventSubscriptionCreateInput {
  """Changes based on protocol, but indicates the exact target."""
  endpoint: String!

  """The SupplyEntity to subscribe to, all lowercase."""
  itemType: String!

  """What type of event to listen for."""
  mutationType: SupplyEventMutationType!

  """The protocol to use to supply the event."""
  protocol: SupplyEventProtocol!

  """
  This is the "main" entity that is being subscribed to.
  
  This can either be a ResonanceDomainEntityId (SupplierId, DemandHqId) to subscribe to an entity to which they have access.
  This is useful to monitor things like changes to Products and such.
  
  Or an Identity (AppClientId, UserName) to subscribe to THEMSELF.
  This is useful to monitor things like app installations, uninstallations, and such.
  
  subscriptionEntityType indicates what type of entity this is.
  """
  subscriptionEntityId: ID!

  """This distinguishes between the types of subscriptions."""
  subscriptionEntityType: SupplyEventSubscriptionEntityType!

  """The app (not appClient) or user that owns the subscription."""
  subscriptionOwnerId: ID!
}

"""
The response when the deleteSupplyEventSubscription mutation is called.
"""
type SupplyEventSubscriptionDeleteResponse {
  deletedId: ID!
}

"""A SupplyEventSubscription edge used for pagination."""
type SupplyEventSubscriptionEdge {
  node: SupplyEventSubscription!
}

"""This distinguishes between the types of subscriptions."""
enum SupplyEventSubscriptionEntityType {
  DOMAINENTITY
  IDENTITY
}
