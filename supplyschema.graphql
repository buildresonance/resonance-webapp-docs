"""The globally used Address of Resonance"""
type Address {
  """The city of the address"""
  city: String!

  """The company associated with the address"""
  company: String

  """The country of the address"""
  country: String!

  """The name associated with the address, i.e. the Person in the household"""
  name: String!

  """The phone number of the address. Format +11231231234"""
  phoneNumber: String

  """The zip or postal code of the address"""
  postalCode: String!

  """The state of the address"""
  state: String!

  """The first line of the street address"""
  streetAddress1: String!

  """The second line of the street address"""
  streetAddress2: String
}

"""The input type for an Address"""
input AddressInput {
  """The city of the address"""
  city: String!

  """The company associated with the address"""
  company: String

  """The country of the address"""
  country: String!

  """The name associated with the address, i.e. the Person in the household"""
  name: String!

  """The phone number of the address. Format +11231231234"""
  phoneNumber: String

  """The zip or postal code of the address"""
  postalCode: String!

  """The state of the address"""
  state: String!

  """The first line of the street address"""
  streetAddress1: String!

  """The second line of the street address"""
  streetAddress2: String
}

"""
The response recieved when an app is installed or the permissions are updated
"""
type AppInstallationResponse {
  supplierIdentities: [SupplierIdentity]!
}

"""What stage and availability the app is in"""
enum AppStatus {
  """The app is in the process of being created"""
  DRAFT

  """The app is available to install, but only through shared links"""
  PRIVATE

  """The app is available to install, and is searchable/discoverable"""
  PUBLIC
}

"""
This is the primary determination of which permission scopes can be requested.
An app cannot be more than one of these.
If something cross domain needs to exist, it should be two apps and they can communicate.
"""
enum AppType {
  DEMANDHQAPP
  STOREFRONTAPP
  SUPPLIERAPP
}

"""Indicates how exactly to handle duplicates in a Composite Entity"""
enum CompositeDuplicationCheckType {
  """
  Duplicates should be checked for every individual item in the inputs, both
  parent and child, and created if any do not exist
  """
  INDIVIDUAL_CREATE

  """
  The parent-most item will be checked for a duplicate, and if found, an error will be thrown
  """
  STANDARD
}

"""A date in ISO 8601 format"""
scalar Date

"""Indicates how a filter should behave, defaults to OR"""
enum FilterOperator {
  AND
  NOT
  OR
}

"""
Filter using a min/max number range, in combination these function like an 'Any' filter.
"""
input FloatRangeFilterInput {
  max: Float!
  min: Float!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The root mutation type for the Supply domain"""
type Mutation {
  """Associate an existing ContentItem with a new SupplierProduct"""
  associateSupplierProductContentItem(input: SupplierProductContentItemAssociationCreateInput): SupplierProductContentItem

  """
  Create a new supplier
              
  Requires supplier/write permission on the requesting identity
  """
  createSupplier(input: SupplierCreateInput!): Supplier!

  """
  Creates a new SupplierDemandHq.
              
  Requires the requesting identity to have the "supplierdemandhq/write" permission on the associated Supplier.
  """
  createSupplierDemandHq(input: SupplierDemandHqCreateInput!): SupplierDemandHq!

  """
  Add a new SupplierIdentity to a Supplier (give a user permissions)
  
  Requires the supplieridentity/write permission on the given Supplier
  """
  createSupplierIdentity(input: SupplierIdentityCreateInput!): SupplierIdentity!

  """Create a new SupplierProduct"""
  createSupplierProduct(input: SupplierProductCreateInput!): SupplierProduct!

  """
  Create a new SupplierProduct and its associated ContentItems, Locales, and Variants in one mutation
  """
  createSupplierProductComposite(
    """The type of duplication check to perform, defaults to STANDARD"""
    duplicationCheckType: CompositeDuplicationCheckType
    input: SupplierProductCompositeCreateInput!
  ): SupplierProduct!

  """Create an Image SupplierProductContentItem from a File"""
  createSupplierProductImageFromFile(input: SupplierProductImageFromFileInput!): SupplierProductImageFromFileResponse!

  """Create a SupplierProductContentItem from a URL"""
  createSupplierProductImageFromUrl(input: SupplierProductImageFromUrlInput!): SupplierProductContentItem!

  """Create Images for a SupplierProductContentItem from Files"""
  createSupplierProductImagesFromFiles(inputs: [SupplierProductImageFromFileInput!]!): SupplierProductImageFromFilesResponse!

  """Create a new supplierProductLocale."""
  createSupplierProductLocale(input: SupplierProductLocaleCreateInput!): SupplierProductLocale!

  """Create a new SupplierQuickLink"""
  createSupplierQuickLink(input: SupplierQuickLinkCreateInput!): SupplierQuickLink!

  """Create a new supplierVariant"""
  createSupplierVariant(input: SupplierVariantCreateInput!): SupplierVariant!

  """
  Create both a new supplierVariant and supplierVariantSupplement simultaneously
  """
  createSupplierVariantComposite(input: SupplierVariantCompositeCreateInput!): SupplierVariantComposite!

  """
  Create a new supplierVariantSupplement
  
  Requires suppliervariantsupplement/write permission on the requesting identity
  """
  createSupplierVariantSupplement(input: SupplierVariantSupplementCreateInput!): SupplierVariantSupplement!

  """Create a subscription for a type of supply event."""
  createSupplyEventSubscription(input: SupplyEventSubscriptionCreateInput!): SupplyEventSubscription!

  """
  Delete a SupplierIdentity from a Supplier (remove a user's permissions)
  
  Requires the supplieridentity/write permission on the given Supplier
  """
  deleteSupplierIdentity(identityId: ID!, supplierId: ID!): SupplierIdentityDeleteResponse

  """Delete a SupplierProduct (and all of its child entities)"""
  deleteSupplierProduct(supplierProductId: ID!): SupplierProductDeleteResponse!

  """Delete specified keys from the SupplierProductCustomData"""
  deleteSupplierProductCustomData(keysToDelete: [String!]!, supplierProductId: ID!): SupplierProductCustomData!

  """Delete a SupplierQuickLink"""
  deleteSupplierQuickLink(appId: ID!, quickLinkType: SupplierQuickLinkType!, supplierId: ID!): SupplierQuickLinkDeletedResponse!

  """Delete a supplierVariant"""
  deleteSupplierVariant(supplierVariantId: ID): SupplierVariantDeleteResponse!

  """Delete specified keys from the SupplierVariantCustomData"""
  deleteSupplierVariantCustomData(keysToDelete: [String!]!, supplierVariantId: ID!): SupplierVariantCustomData!

  """Delete a subscription for a type of supply event."""
  deleteSupplyEventSubscription(eventSubscriptionId: ID!): SupplyEventSubscriptionDeleteResponse!

  """
  Install an app to a Supplier (give an app permissions)
  
  Requires the supplieridentity/write permission on the given Supplier
  """
  installApp(appId: ID!, supplierId: ID!): AppInstallationResponse!

  """
  Update an app's permissions on a Supplier. This is a no-op if the app's
  requested permissions are the same as the current permissions.
  
  Requires the supplieridentity/write permission on the given Supplier
  """
  updateAppPermissions(appId: ID!, supplierId: ID!): AppInstallationResponse!

  """
  Update an existing supplier
              
  Requires supplier/write permission on the requesting identity
  """
  updateSupplier(input: SupplierUpdateInput!): Supplier!

  """
  Updates an existing SupplierDemandHq.
  
              Requires the requesting identity to have the "supplierdemandhq/write" permission on the associated Supplier.
  """
  updateSupplierDemandHq(input: SupplierDemandHqUpdateInput!): SupplierDemandHq!

  """
  Update a SupplierIdentity for a Supplier (give a user permissions)
  
  Requires the supplieridentity/write permission on the given Supplier
  """
  updateSupplierIdentity(input: SupplierIdentityUpdateInput!): SupplierIdentity!

  """Update an existing SupplierProduct"""
  updateSupplierProduct(input: SupplierProductUpdateInput!): SupplierProduct!

  """Update an existing SupplierProductContentItem"""
  updateSupplierProductContentItem(input: SupplierProductContentItemUpdateInput!): SupplierProductContentItem!

  """Update an existing supplierProductLocale"""
  updateSupplierProductLocale(input: SupplierProductLocaleUpdateInput!): SupplierProductLocale!

  """
  Bulk Update SupplierProducts
  
  Note that if there are Permission or UserInput Errors, the entire group will fail, not partially succeed.
  """
  updateSupplierProducts(inputs: [SupplierProductUpdateInput!]): [SupplierProduct!]

  """Update a SupplierQuickLink"""
  updateSupplierQuickLink(input: SupplierQuickLinkUpdateInput!): SupplierQuickLink!

  """Update an existing supplierVariant"""
  updateSupplierVariant(externalInput: SupplierVariantExternalUpdateInput, input: SupplierVariantUpdateInput): SupplierVariant!

  """
  Update an existing supplierVariantSupplement
  
  Requires suppliervariantsupplement/write permission on the requesting identity
  """
  updateSupplierVariantSupplement(input: SupplierVariantSupplementUpdateInput!): SupplierVariantSupplement!

  """
  Bulk update supplierVariants
  
  Requires suppliervariant/write permission on the requesting identity
  Note that if there are Permission or UserInput Errors, the entire group will fail, not partially succeed.
  """
  updateSupplierVariants(externalInputs: [SupplierVariantExternalUpdateInput], inputs: [SupplierVariantUpdateInput]): [SupplierVariant!]

  """Add or update keys in the SupplierProductCustomData"""
  upsertSupplierProductCustomData(input: SupplierProductCustomDataUpsertInput!): SupplierProductCustomData!

  """Add or update keys in the SupplierVariantCustomData"""
  upsertSupplierVariantCustomData(input: SupplierVariantCustomDataUpsertInput!): SupplierVariantCustomData!

  """
  Bulk upsert supplierVariantSupplements.
  
  Requires suppliervariantsupplement/write permission on the requesting identity
  Note that if there are Permission or UserInput Errors, the entire group will fail, not partially succeed.
  """
  upsertSupplierVariantSupplements(inputs: [SupplierVariantSupplementCreateInput!]): [SupplierVariantSupplement!]
}

"""Information on Pagination"""
type PageInfo {
  """
  The cursor to use when paginating forwards (using first/after). Will always be
  populated regardless of if a next page exists.
  """
  endCursor: String

  """
  Whether or not using the endCursor will result in more results. Always
  populated, but will always be false when paginating using last/before.
  """
  hasNextPage: Boolean!

  """
  Whether or not using the startCursor will result in more results. Always
  populated, but will always be false when paginating using first/after.
  """
  hasPreviousPage: Boolean!

  """
  The cursor to use when paginating backwards (using last/before). Will always
  be populated regardless of if a previous page exists
  """
  startCursor: String
}

"""An up to 3-part tag, comma-separated, that has been parsed"""
type ParsedTag {
  """The category of the tag"""
  category: String

  """The key of the tag"""
  key: String

  """The value of the tag"""
  value: String!
}

"""
This type is returned on routes with no permissions attached to protect
Personally Identifiable Information, but still provide minimal data.
Provides a subset of App from the Identity domain.
"""
type PublicApp {
  appClientIds: [ID!]!
  appId: ID!
  appType: AppType!
  description: String
  name: String!
  partnerId: ID!
  requestedScopes: [String]
  status: AppStatus!
}

"""The parent-most entity of the Demand Domain"""
type PublicDemandHq {
  demandHqId: ID!
  description: String
  name: String!
}

"""
This type is returned on routes with no permissions attached to protect
Personally Identifiable Information, but still provide minimal data.
Can be a User or AppClient.
"""
type PublicIdentity {
  displayName: String!

  """A userName or appClientId"""
  identityId: ID!
  identityParentEntityId: ID
}

"""
This type is the extension of SupplierIdentity's identityParentEntityId into the Public version of the entity,
and encompasses all possible uses of that field.
Currently, this is for Apps only.
"""
union PublicIdentityParent = PublicApp

"""The parent-most entity of the Supplier Domain"""
type PublicSupplier {
  """Indicates the vertical the majority of a Supplier's goods are in."""
  category: SupplierCategory
  description: String

  """
  The approximate number of in stock products this Supplier has on a typical basis.
  """
  inStockProducts: Int
  name: String!

  """The address where this Supplier's goods ship from."""
  shipFromAddress: Address
  status: SupplierStatus!
  supplierId: ID!

  """
  The top Brands or Vendors this Supplier carries, limit 5 and 256 characters each.
  """
  topVendors: [String!]
}

"""Paginate through PublicSupplier"""
type PublicSupplierConnection {
  edges: [PublicSupplierEdge]!
  nodes: [PublicSupplier]!
  pageInfo: PageInfo!
}

"""One edge producing one PublicSupplier Node"""
type PublicSupplierEdge {
  node: PublicSupplier
}

"""The root query type for the Supply domain"""
type Query {
  """Nothing to see here, just a workaround for Apollo Server"""
  _empty: String

  """See changes that have been made to this SupplierVariant"""
  events(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """The entity to retrieve events for, like a SupplierVariantId"""
    entityId: ID!

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int

    """The SupplierId to retrieve events for"""
    supplierId: ID!
  ): SupplyEventConnection!

  """List PublicSuppliers"""
  publicSuppliers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    query: String
    supplierIds: [ID!]
  ): PublicSupplierConnection!

  """
  Get a single supplier by SupplierId
  
  Requires supplier/read permission on the requesting identity
  """
  supplier(supplierId: ID!): Supplier

  """
  Get a SupplierDemandHq by its Ids.
              
  Requires the requesting identity to have the "supplierdemandhq/read" permission on the associated Supplier.
  """
  supplierDemandHq(demandHqId: ID!, supplierId: ID!): SupplierDemandHq

  """
  Get a filtered list of SupplierIdentities
  
  All of the filters are optional, but you must include at least one.
  You may receive less supplierIdentities than you indicate if you do not have
  permission to read part of the result set.
  
  Not all filter combinations are valid, for example you cannot filter by
  - identityId + identityParentEntityId (requires supplierId)
  - identityType only (requires supplierId)
  
  Requires supplieridentity/read permission on the requesting identity for each supplier requested,
  or you can request your own identities.
  """
  supplierIdentities(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """
    Filter the results to a specific identityId.
    Use this with your own userName or appClientId in order to see "My SupplierIdentities".
    You automatically have access to your own SupplierIdentities.
    """
    identityId: ID

    """Filter the results to a specific identityParentEntityId (optional)"""
    identityParentEntityId: ID

    """Filter the results to a specific identity type (optional)"""
    identityType: SupplierIdentityType

    """Returns the last n elements from the list."""
    last: Int

    """Filter the results to a specific supplierId. (optional)"""
    supplierId: ID
  ): SupplierIdentityConnection!

  """
  Get a single SupplierIdentity
  
  Requires supplieridentity/read permission on the requesting identity for the supplier requested
  """
  supplierIdentity(identityId: ID!, supplierId: ID!): SupplierIdentity

  """
  Get a single SupplierProduct by its ID.
  
  Requires supplierproduct/read permission on the requesting identity
  """
  supplierProduct(supplierProductId: ID!): SupplierProduct

  """
  List multiple SupplierQuickLinks for an app.
  
  At least one filter is required, supplierId and quickLinkType are required to be used together.
  
  Permissions vary by filter:
  - appId: You must be an appClient for the app.
  - supplierId: You must have supplier/read permission for the supplier.
  """
  supplierQuickLinks(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Filter for AppId, cannot be used with other filters."""
    appId: ID

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int

    """Filter to be used with supplierId, cannot be used with other filters."""
    quickLinkType: SupplierQuickLinkType

    """
    Filter to be used with quickLinkType, cannot be used with other filters.
    """
    supplierId: ID
  ): SupplierQuickLinkConnection!

  """
  Get a single supplierVariant by SupplierVariantId
  
  Requires suppliervariant/read permission on the requesting identity
  """
  supplierVariant(supplierVariantId: ID): SupplierVariant

  """
  Get several supplierVariants by SupplierVariantIds (currently)
  
  Requires suppliervariant/read permission on the requesting identity for all associated suppliers
  """
  supplierVariants(supplierVariantIds: [ID!]!): SupplierVariantConnection!

  """
  Get a supplyEventSubscription by id. Requires you to own the subscription.
  """
  supplyEventSubscription(eventSubscriptionId: ID!): SupplyEventSubscription

  """
  List supplyEventSubscriptions by filtering. Requires you to own the subscriptions.
  """
  supplyEventSubscriptions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    This filter should be used alone, including without any relay parameters.
                It will supercede all other parameters.
    """
    eventSubscriptionIds: [ID!]

    """Returns the first n elements from the list."""
    first: Int

    """
    In order to use this filter, you must also provide subscriptionEntityId
    """
    itemType: String

    """Returns the last n elements from the list."""
    last: Int

    """
    In order to use this filter, you must also include itemType and subscriptionEntityId
    """
    mutationType: SupplyEventMutationType

    """This filter can be used with or without subscriptionOwnerId"""
    subscriptionEntityId: ID

    """
    If you are not using eventSubscriptionIds, and are not querying for an identityId event subscription,
    this filter is highly recommended to use to ensure you have permissions on the returned eventSubscriptions.
    Otherwise, you may not have permissions on the returned eventSubscriptions, and see blank results.
    """
    subscriptionOwnerId: ID
  ): SupplyEventSubscriptionConnection!
}

"""Used throughout the app to give a currency to price information"""
enum ResonanceCurrency {
  USD
}

"""
Used throughout the app to indicate what language and locality a given text is in
"""
enum ResonanceLocaleType {
  EN_US
}

"""Indicates which direction to sort, defaults to ASC"""
enum SortDirection {
  ASC
  DESC
}

"""Filter using a combination of operator and an array of string values"""
input StringFilterInput {
  operator: FilterOperator
  values: [String!]!
}

"""The parent-most entity of the Supplier Domain"""
type Supplier {
  """Indicates the vertical the majority of a Supplier's goods are in."""
  category: SupplierCategory
  createdAt: String!
  defaultCurrency: ResonanceCurrency!
  defaultLocaleType: ResonanceLocaleType!
  description: String

  """
  The approximate number of in stock products this Supplier has on a typical basis.
  """
  inStockProducts: Int

  """
  List supplyEventSubscriptions by filtering for your identity for this supplier.
  """
  mySupplyEventSubscriptions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """
    In order to use this filter, you must also provide subscriptionEntityId
    """
    itemType: String

    """Returns the last n elements from the list."""
    last: Int

    """
    In order to use this filter, you must also include itemType and subscriptionEntityId
    """
    mutationType: SupplyEventMutationType
  ): SupplyEventSubscriptionConnection!
  name: String!

  """
  These users will get notified if something requires attention for this Supplier.
  If none are provided, ownerUserName will be notified.
  """
  notificationUserNames: SupplierNotificationUserNames

  """Get the owner for a given Supplier"""
  ownerUser: PublicIdentity
  ownerUserName: String!

  """Get a single SupplierQuickLink by its ids"""
  quickLink(appId: ID!, quickLinkType: SupplierQuickLinkType!): SupplierQuickLink

  """List multiple SupplierQuickLinks for a single SupplierQuickLinkType"""
  quickLinks(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    quickLinkType: SupplierQuickLinkType!
  ): SupplierQuickLinkConnection!

  """The address where this Supplier's goods ship from."""
  shipFromAddress: Address
  status: SupplierStatus!

  """
  Get a SupplierDemandHq by its DemandHqId.
              
  Requires the requesting identity to have the "supplierdemandhq/read" permission on the associated Supplier.
  """
  supplierDemandHq(demandHqId: ID!): SupplierDemandHq

  """
  Get a list of SupplierDemandHqs for the Supplier.
  
  Requires the requesting identity to have the "supplierdemandhq/read" permission on the associated Supplier.
  """
  supplierDemandHqs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    status: SupplierDemandHqStatus
  ): SupplierDemandHqConnection!
  supplierId: ID!

  """
  Returns SupplierIdentities for the given Supplier
  
  Requires supplieridentity/read permission on the requesting identity
  """
  supplierIdentities(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Filter the results to a specific identityParentEntityId (optional)"""
    identityParentEntityId: ID

    """Filter the results to a specific identity type (optional)"""
    identityType: SupplierIdentityType

    """Returns the last n elements from the list."""
    last: Int
  ): SupplierIdentityConnection!

  """
  Returns a SupplierIdentity for the given Supplier
  
  Requires supplieridentity/read permission on the requesting identity, or you can request your own identity.
  """
  supplierIdentity(identityId: ID!): SupplierIdentity

  """
  Get a single SupplierProduct by its ID.
  
  Requires supplierproduct/read permission on the requesting identity
  """
  supplierProduct(supplierProductId: ID!): SupplierProduct

  """
  Term aggregations for SupplierProducts, typically used to suggest terms to use in Search Filters.
  """
  supplierProductTermAggregations(
    """The number of aggregations to return for each type."""
    numberOfResults: Int!
  ): SupplierProductTermAggregations

  """
  List SupplierProducts for a Supplier.
  
  Requires supplierproduct/read permission on the requesting identity
  """
  supplierProducts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Filter SupplierProducts using cost ranges."""
    cost: [FloatRangeFilterInput]

    """Returns the first n elements from the list."""
    first: Int

    """Filter SupplierProducts using InventoryPolicy (Variant)."""
    inventoryPolicy: [SupplierProductInventoryPolicyFilterInput]
    inventoryStatus: VariantInventoryStatus

    """Returns the last n elements from the list."""
    last: Int

    """Filter SupplierProducts using Manufacturer (VariantSupplement)."""
    manufacturer: [StringFilterInput]

    """Filter SupplierProducts using MSRP ranges."""
    msrp: [FloatRangeFilterInput]

    """
    Query supplierProducts for certain terms. Searches several fields, including
    supplierProduct.tags, supplierProduct.title, supplierProduct.vendor,
    supplierProductLocales.description, supplierProductLocales.featureBullets,
    supplierVariantSupplements.barcode, supplierVariantSupplement.mpn,
    supplierVariantSupplement.sku
    """
    query: String

    """Filter SupplierProducts using recommendedPrice ranges."""
    recommendedPrice: [FloatRangeFilterInput]

    """
    Sort SupplierProducts by a series of fields and directions, defaults to CREATED_AT/ASC.
    """
    sortOrder: [SupplierProductSortInput]

    """Filter SupplierProducts using StandardizedColor (Variant)."""
    standardizedColor: [SupplierProductStandardizedColorFilterInput]

    """Filter SupplierProducts using Status."""
    status: SupplyEntityStatusFilterInput

    """Filter SupplierProducts using Tags."""
    tags: [StringFilterInput]

    """Filter SupplierProducts using Vendors."""
    vendor: StringFilterInput
  ): SupplierProductConnectionWithSearch!

  """
  The top Brands or Vendors this Supplier carries, limit 5 and 256 characters each.
  """
  topVendors: [String!]
  updatedAt: String!
  updatedBy: ID!
}

"""Indicates the vertical the majority of a Supplier's goods are in."""
enum SupplierCategory {
  SPORTING_GOODS
}

"""The necessary fields in order to create a new supplier"""
input SupplierCreateInput {
  """Indicates the vertical the majority of a Supplier's goods are in."""
  category: SupplierCategory
  defaultCurrency: ResonanceCurrency!
  defaultLocaleType: ResonanceLocaleType!
  description: String

  """
  The approximate number of in stock products this Supplier has on a typical basis.
  """
  inStockProducts: Int
  name: String!

  """
  These users will get notified if something requires attention for this Supplier.
  If none are provided, ownerUserName will be notified.
  """
  notificationUserNames: SupplierNotificationUserNamesInput

  """The address where this Supplier's goods ship from."""
  shipFromAddress: AddressInput

  """
  The top Brands or Vendors this Supplier carries, limit 5 and 256 characters each.
  """
  topVendors: [String!]
}

"""A relationship between a Supplier and a DemandHQ."""
type SupplierDemandHq {
  createdAt: Date!
  demandHqId: ID!

  """Get the expanded PublicDemandHq for this SupplierDemandHq"""
  publicDemandHq: PublicDemandHq

  """
  Indicates what status the current relationship between a Supplier and a DemandHQ is in.
  """
  status: SupplierDemandHqStatus!
  supplierId: ID!

  """
  If populated, this means that the last update was from the associated DemandHQ (typically a REQUEST).
  """
  syncedAt: Date
  updatedAt: Date!
  updatedBy: ID!
}

"""Paginate through SupplierDemandHqs"""
type SupplierDemandHqConnection {
  edges: [SupplierDemandHqEdge]!
  nodes: [SupplierDemandHq]!
  pageInfo: PageInfo!
}

"""Input for creating a new SupplierDemandHq."""
input SupplierDemandHqCreateInput {
  demandHqId: ID!

  """
  Indicates what status the current relationship between a Supplier and a DemandHQ is in.
  """
  status: SupplierDemandHqStatus!
  supplierId: ID!
}

"""One edge producing one SupplierDemandHq Node"""
type SupplierDemandHqEdge {
  node: SupplierDemandHq
}

"""
Indicates what status the current relationship between a Supplier and a DemandHQ is in.
"""
enum SupplierDemandHqStatus {
  """The DemandHq has permission to sell items from the Supplier."""
  APPROVED

  """The Supplier has denied permission to the DemandHQ to sell its items."""
  DENIED

  """The DemandHq has requested permission to sell items from the Supplier."""
  PENDING
}

"""Input for updating an existing SupplierDemandHq."""
input SupplierDemandHqUpdateInput {
  demandHqId: ID!

  """
  Indicates what status the current relationship between a Supplier and a DemandHQ is in.
  """
  status: SupplierDemandHqStatus
  supplierId: ID!
}

"""Indicates a User or App has permissions on a Supplier"""
type SupplierIdentity {
  """Could be a userName or an appClientId"""
  identityId: ID!
  identityParentEntityId: ID
  identityType: SupplierIdentityType!
  permissions: SupplierIdentityPermissions!

  """Get a public identity by id"""
  publicIdentity: PublicIdentity

  """Get the expanded publicIdentityParent for this SupplierIdentity"""
  publicIdentityParent: PublicIdentityParent

  """Get the supplier associated with this SupplierIdentity."""
  supplier: Supplier
  supplierId: ID!
  updatedBy: String!
}

"""Paginate through SupplierIdentities"""
type SupplierIdentityConnection {
  edges: [SupplierIdentityEdge]!
  nodes: [SupplierIdentity]!
  pageInfo: PageInfo!
}

"""
Exactly like SupplierIdentity, but no updatedBy or identityType (always User, Apps get installed)
"""
input SupplierIdentityCreateInput {
  """Always a user's userName (not appClientId)"""
  identityId: ID!
  identityParentEntityId: ID

  """Should always be USER"""
  identityType: SupplierIdentityType!
  permissions: SupplierIdentityPermissionsInput!
  supplierId: ID!
}

"""Returned object from deleteSupplierIdentity"""
type SupplierIdentityDeleteResponse {
  deletedId: SupplierIdentityDeletedId
}

"""The deleted IDs identifying the SupplierIdentity"""
type SupplierIdentityDeletedId {
  identityId: ID!
  supplierId: ID!
}

"""One edge producing one SupplierIdentity Node"""
type SupplierIdentityEdge {
  node: SupplierIdentity
}

"""
Indicates which permissions this Identity possesses on a given Supplier
"""
type SupplierIdentityPermissions {
  roles: [String]!
  scopes: [String]!
}

"""Exactly like SupplierIdentityPermissions"""
input SupplierIdentityPermissionsInput {
  roles: [String]!
  scopes: [String]!
}

"""Indicates whether the user type is an app or human user"""
enum SupplierIdentityType {
  APPCLIENT
  USER
}

"""
ID Fields are required, but all other fields are optional, only included fields will be updated.
"""
input SupplierIdentityUpdateInput {
  """Could be a userName or an appClientId"""
  identityId: ID!
  permissions: SupplierIdentityPermissionsInput
  supplierId: ID!
}

"""
These users will get notified if something requires attention for this Supplier.
If none are provided, ownerUserName will be notified.
"""
type SupplierNotificationUserNames {
  """All notifications for the distribution side, besides purchaseOrders."""
  distribution: [String!]

  """All notifications for the management side (Products, Variants, etc.)."""
  management: [String!]

  """
  These are part of distribution, but are a specific enough case to be handled separately.
  """
  purchaseOrders: [String!]
}

"""Exactly like SupplierNotificationUserNames"""
input SupplierNotificationUserNamesInput {
  """All notifications for the distribution side, besides purchaseOrders."""
  distribution: [String!]

  """All notifications for the management side (Products, Variants, etc.)."""
  management: [String!]

  """
  These are part of distribution, but are a specific enough case to be handled separately.
  """
  purchaseOrders: [String!]
}

"""
This is the main entity of the Supplier domain, and is used to represent a product, which is a group of SKUs.
SKUs are represented by SupplierVariants, a child of this entity.
This entity is less frequently updated, it is more likely that SupplyVariant will be updated frequently.
"""
type SupplierProduct {
  """
  Get a supplierProductContentItem for a supplierProduct
  
  Requires supplierproductcontentitem/read permission on the requesting identity
  """
  contentItem(contentItemId: ID!): SupplierProductContentItem

  """
  Get a list of supplierProductContentItems
  
  Requires supplierproductcontentitem/read permission on the supplier for the requesting identity
  
  Sorts by position.
  This means "featuredImage" can be retrieved by using contentType: IMAGE and first: 1.
  """
  contentItems(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    contentType: SupplierProductContentType

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): SupplierProductContentItemConnection
  createdAt: Date!

  """Get the associated SupplierProductCustomData"""
  customData: SupplierProductCustomData

  """
  Passed along in PurchaseOrders so the Supplier can identify items in their warehouse.
  """
  externalProductId: String!

  """
  Get the featured image for a supplierProduct
  
  Requires the supplierproductcontentitem/read permission on the associated Supplier.
  
  This is a convenience field that is equivalent to contentItems(contentType: IMAGE, first: 1)
  """
  featuredImage: SupplierProductContentItem

  """
  Get a single supplierProductLocale by ResonanceLocaleType
  
      Requires supplierproductlocale/read permission on the requesting identity
  """
  locale(localeType: ResonanceLocaleType!): SupplierProductLocale

  """
  The labels for the options of this product, i.e. ["Color", "Size"]
  These will match with the order of the optionValues on the SupplierVariants.
  Must have 1-3, and it should match the number of options in the variants, but there is no validation to do so.
  Set the first optionLabel to "No Option" if you don't want to use options for this product.
  See https://docs.buildresonance.com/concepts/products/#no-option-products for more info.
  """
  optionLabels: [String!]!

  """Indicates whether a product is live and able to be ordered."""
  status: SupplyEntityStatus!

  """Reference to the Supplier that owns this product."""
  supplierId: ID!
  supplierProductId: ID!

  """
  Get a single supplierVariant by SupplierVariantId
  
  Requires suppliervariant/read permission on the requesting identity
  """
  supplierVariant(supplierVariantId: ID): SupplierVariant

  """
  Get a list of supplierVariants
  
  Requires suppliervariant/read permission on the supplier for the requesting identity
  """
  supplierVariants(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): SupplierVariantConnection!

  """Get tags for a SupplierProduct."""
  tags: SupplierProductTags

  """The title of the product."""
  title: String!
  updatedAt: Date!
  updatedBy: ID!

  """The brand or manufacturer of the product."""
  vendor: String!
}

"""
The necessary fields to create a SupplierProductComposite, or a SupplierProduct
and its ContentItems, Locales, and Variants in one mutation
"""
input SupplierProductCompositeCreateInput {
  supplierProductContentItemAssociationInputs: [SupplierProductContentItemAssociationInCompositeCreateInput]
  supplierProductImageFromUrlInputs: [SupplierProductImageFromUrlInCompositeCreateInput]
  supplierProductInput: SupplierProductCreateInput!
  supplierProductLocaleInputs: [SupplierProductLocaleInCompositeCreateInput]
  supplierVariantInputs: [SupplierVariantCompositeInCompositeCreateInput]
}

"""Paginate through SupplierProducts"""
type SupplierProductConnectionWithSearch {
  edges: [SupplierProductEdge]!
  nodes: [SupplierProduct]!
  pageInfo: PageInfo!

  """
  This is an object with terms in the query as keys, and a suggestion for that
  term as the value. This is often referred to as 'Did you mean?'
  """
  querySuggestions: JSON
}

"""
This has a many to one relationship with SupplierProduct, and provides a connection to the CDN items.
"""
type SupplierProductContentItem {
  alt: String
  category: String
  contentItemId: ID!

  """The key to the file in the CDN"""
  contentKey: String!
  contentType: SupplierProductContentType!
  createdAt: Date!

  """
  Used to determine what order the content comes out in.
  Positive Integers are allowed, up to 9,999,999,999, and it does not have to be unique or sequential.
  """
  position: Int

  """The original URL, or some kind of file pointer, based on sourceType"""
  sourceDetail: String!

  """How did we receive this content item?"""
  sourceType: SupplierProductContentItemSourceType!
  status: SupplierProductContentItemStatus!
  supplierId: ID!
  supplierProductId: ID!
  updatedAt: Date!
  updatedBy: String!
}

"""
Input object to associate an existing ContentItem with a SupplierProduct
"""
input SupplierProductContentItemAssociationCreateInput {
  alt: String
  category: String
  contentItemId: ID!

  """
  Used to determine what order the content comes out in.
  Positive Integers are allowed, up to 9,999,999,999, and it does not have to be unique or sequential.
  """
  position: Int
  supplierId: ID!
  supplierProductId: ID!
}

"""
Input object to associate an existing ContentItem with a SupplierProduct inside a SupplierProductCompositeCreateInput
"""
input SupplierProductContentItemAssociationInCompositeCreateInput {
  alt: String
  category: String
  contentItemId: ID!

  """
  Used to determine what order the content comes out in.
  Positive Integers are allowed, up to 9,999,999,999, and it does not have to be unique or sequential.
  """
  position: Int
}

"""Paginate through SupplierProductContentItems"""
type SupplierProductContentItemConnection {
  edges: [SupplierProductContentItemEdge]!
  nodes: [SupplierProductContentItem]!
  pageInfo: PageInfo!
}

"""One edge producing one SupplierProduct Node"""
type SupplierProductContentItemEdge {
  node: SupplierProductContentItem
}

"""Describes where the content originally was sourced from"""
enum SupplierProductContentItemSourceType {
  UPLOADMULTIPART
  UPLOADSINGLEPART
  URL
}

"""Indicates what the status of the content item is in"""
enum SupplierProductContentItemStatus {
  ACTIVE
  ARCHIVED
}

"""Input object for updating an existing SupplierProductContentItem"""
input SupplierProductContentItemUpdateInput {
  alt: String
  category: String
  contentItemId: ID!

  """
  Used to determine what order the content comes out in.
  Positive Integers are allowed, up to 9,999,999,999, and it does not have to be unique or sequential.
  """
  position: Int
  status: SupplierProductContentItemStatus!
  supplierProductId: ID!
}

"""Describes what type of content the entity is"""
enum SupplierProductContentType {
  IMAGE
  VIDEO
}

"""
The necessary fields to create a new SupplierProduct.
status will be initially set to DRAFT
"""
input SupplierProductCreateInput {
  """
  Passed along in PurchaseOrders so the Supplier can identify items in their warehouse.
  """
  externalProductId: String!

  """
  The labels for the options of this product, i.e. ["Color", "Size"]
  These will match with the order of the optionValues on the SupplierVariants.
  Must have 1-3, and it should match the number of options in the variants, but there is no validation to do so.
  Set the first optionLabel to "No Option" if you don't want to use options for this product.
  See https://docs.buildresonance.com/concepts/products/#no-option-products for more info.
  """
  optionLabels: [String!]!

  """Reference to the Supplier that owns this product."""
  supplierId: ID!
  tags: [String!]

  """The title of the product."""
  title: String!

  """The brand or manufacturer of the product."""
  vendor: String!
}

"""
Data that doesn't fit in the provided SupplierProduct fields needs to live here.
"""
type SupplierProductCustomData {
  createdAt: String!
  data: JSON!
  supplierId: ID!
  supplierProductId: ID!
  updatedAt: String!
  updatedBy: String!
}

"""
The input type to upsert SupplierProductCustomData.
The data object is required, but is a partial update, and keys not mentioned will be left alone.
"""
input SupplierProductCustomDataUpsertInput {
  data: JSON!
  supplierId: ID!
  supplierProductId: ID!
}

"""Response for deleting a SupplierProduct"""
type SupplierProductDeleteResponse {
  deletedId: ID
}

"""One edge producing one SupplierProduct Node"""
type SupplierProductEdge {
  node: SupplierProduct
}

"""
Input object for creating an Image SupplierProductContentItem from a File on a device
"""
input SupplierProductImageFromFileInput {
  alt: String!
  category: String
  fileExtension: String!
  fileName: String!

  """
  Used to determine what order the content comes out in.
  Positive Integers are allowed, up to 9,999,999,999, and it does not have to be unique or sequential.
  """
  position: Int
  supplierId: ID!
  supplierProductId: ID!
}

"""The original input that errored"""
type SupplierProductImageFromFileInputResponse {
  alt: String!
  category: String
  fileExtension: String!
  fileName: String!

  """
  Used to determine what order the content comes out in.
  Positive Integers are allowed, up to 9,999,999,999, and it does not have to be unique or sequential.
  """
  position: Int
  supplierId: ID!
  supplierProductId: ID!
}

"""The response object from createSupplierProductImageFromFile"""
type SupplierProductImageFromFileResponse {
  contentItem: SupplierProductContentItem!
  fields: JSON!
  url: String!
}

"""Returned object from createSupplierProductImagesFromFiles"""
type SupplierProductImageFromFilesResponse {
  errors: [SupplierProductImagesFromFilesError!]

  """
  A signed S3 url to upload the image to along with supporting data about the image
  """
  mutationResponses: [SupplierProductImageFromFileResponse!]!
}

"""
Input object to create a new SupplierProductContentItem from a URL for a
SupplierProduct inside a SupplierProductCompositeCreateInput
"""
input SupplierProductImageFromUrlInCompositeCreateInput {
  alt: String
  category: String

  """
  Temporary ID, can be any string, to associate Variants with this Image. On
  create, the real contentItemId will be substituted.
  """
  contentItemInputId: String

  """
  Used to determine what order the content comes out in.
  Positive Integers are allowed, up to 9,999,999,999, and it does not have to be unique or sequential.
  """
  position: Int
  url: String!
}

"""
Input object for creating an Image SupplierProductContentItem from a URL
"""
input SupplierProductImageFromUrlInput {
  alt: String
  category: String

  """
  Used to determine what order the content comes out in.
  Positive Integers are allowed, up to 9,999,999,999, and it does not have to be unique or sequential.
  """
  position: Int
  supplierId: ID!
  supplierProductId: ID!
  url: String!
}

"""
Returned object for any failed CreateSupplierProductImagesFromFiles inputs
"""
type SupplierProductImagesFromFilesError {
  """The error message"""
  error: String!
  input: SupplierProductImageFromFileInputResponse!
}

"""Filter SupplierProducts using InventoryPolicy (Variant)."""
input SupplierProductInventoryPolicyFilterInput {
  operator: FilterOperator
  values: [SupplierVariantInventoryPolicy!]!
}

"""
This has a many to one relationship with SupplierProduct, and provides localized language data for the appropriate fields.
There will often only be one of these, and it should be the one set in defaultLocale for the supplier.
"""
type SupplierProductLocale {
  createdAt: String!
  description: String

  """Limited to 5 bullets"""
  featureBullets: [String]
  localeType: ResonanceLocaleType!
  supplierId: ID!
  supplierProductId: ID!
  updatedAt: String!
  updatedBy: String!
}

"""The necessary fields in order to create a new supplierProductLocale"""
input SupplierProductLocaleCreateInput {
  description: String

  """Limited to 5 bullets"""
  featureBullets: [String]
  localeType: ResonanceLocaleType!
  supplierId: ID!
  supplierProductId: ID!
}

"""
The necessary fields in order to create a new supplierProductLocale as part of a SupplierProductCompositeCreateInput
"""
input SupplierProductLocaleInCompositeCreateInput {
  description: String

  """Limited to 5 bullets"""
  featureBullets: [String]
  localeType: ResonanceLocaleType!
}

"""
The necessary fields in order to update a supplierProductLocale.
ID fields are required, others are optional, only included fields will be updated.
"""
input SupplierProductLocaleUpdateInput {
  description: String

  """Limited to 5 bullets"""
  featureBullets: [String]
  localeType: ResonanceLocaleType!
  supplierProductId: ID!
}

"""Indicates which field to sort by, defaults to CREATED_AT"""
enum SupplierProductSortField {
  COST
  CREATED_AT
  INVENTORY_QUANTITY
  MSRP
  RECOMMENDED_PRICE
  RELEVANCE
  TITLE
  UPDATED_AT
  VENDOR
}

"""Sort SupplierProducts by a field and direction."""
input SupplierProductSortInput {
  direction: SortDirection!
  field: SupplierProductSortField!
}

"""Filter SupplierProducts using StandardizedColor (Variant)."""
input SupplierProductStandardizedColorFilterInput {
  operator: FilterOperator
  values: [VariantStandardizedColor!]!
}

"""Categories and other groupings that apply to this product."""
type SupplierProductTags {
  """Get parsed, and optionally filtered, tags for a SupplierProduct."""
  parsed(
    """Optionally filter tags by category."""
    category: String

    """
    Optionally filter tags by key. If category is not provided, but key is, category must be null to be returned.
    """
    key: String
  ): [ParsedTag]
  raw: [String!]
  supplierId: ID!
  supplierProductId: ID!
  updatedAt: Date!
  updatedBy: ID!
}

"""
A Map of several fields of SupplierProduct and term aggregations for each
"""
type SupplierProductTermAggregations {
  manufacturers: [TermAggregation!]
  tags: [TermAggregation!]
  vendors: [TermAggregation!]
}

"""
The necessary and optional fields to update an existing SupplierProduct.
If status is set to Publish, additional validation will be performed.
"""
input SupplierProductUpdateInput {
  """
  Passed along in PurchaseOrders so the Supplier can identify items in their warehouse.
  """
  externalProductId: String

  """
  The labels for the options of this product, i.e. ["Color", "Size"]
  These will match with the order of the optionValues on the SupplierVariants.
  Must have 1-3, and it should match the number of options in the variants, but there is no validation to do so.
  Set the first optionLabel to "No Option" if you don't want to use options for this product.
  See https://docs.buildresonance.com/concepts/products/#no-option-products for more info.
  """
  optionLabels: [String!]

  """Indicates whether a product is live and able to be ordered."""
  status: SupplyEntityStatus
  supplierProductId: ID!
  tags: [String!]

  """The title of the product."""
  title: String

  """The brand or manufacturer of the product."""
  vendor: String
}

"""Represents a link to your app from inside the Resonance Supply Portal"""
type SupplierQuickLink {
  """The Id of the App this quicklink pertains to."""
  appId: ID!
  createdAt: String!

  """
  This can have dynamic parts, using [supplierProductId] format. It represents where the link goes.
  """
  dynamicUrl: String!

  """What the text for the link should be to the user."""
  label: String!

  """Indicates which page the SupplierQuickLink would live on"""
  quickLinkType: SupplierQuickLinkType!

  """
  The Id of the Supplier this quicklink pertains to (the one that has installed your app).
  """
  supplierId: ID!
  updatedAt: String!
  updatedBy: String!
}

"""Paginate through SupplierQuickLinks"""
type SupplierQuickLinkConnection {
  edges: [SupplierQuickLinkEdge]!
  nodes: [SupplierQuickLink]!
  pageInfo: PageInfo!
}

"""
The required input fields to create a new SupplierQuickLink
            
You must be calling from the pertaining app's AppClient
"""
input SupplierQuickLinkCreateInput {
  """The Id of the App this quicklink pertains to."""
  appId: ID!

  """
  This can have dynamic parts, using [supplierProductId] format. It represents where the link goes.
  """
  dynamicUrl: String!

  """What the text for the link should be to the user."""
  label: String!

  """Indicates which page the SupplierQuickLink would live on"""
  quickLinkType: SupplierQuickLinkType!

  """
  The Id of the Supplier this quicklink pertains to (the one that has installed your app).
  """
  supplierId: ID!
}

"""When a SupplierQuickLink is deleted, the ID is returned"""
type SupplierQuickLinkDeletedId {
  appId: ID!
  quickLinkType: SupplierQuickLinkType!
  supplierId: ID!
}

"""The response shape when a SupplierQuickLink is deleted"""
type SupplierQuickLinkDeletedResponse {
  deletedId: SupplierQuickLinkDeletedId!
}

"""An edge for SupplierQuickLink"""
type SupplierQuickLinkEdge {
  node: SupplierQuickLink!
}

"""Indicates which page the SupplierQuickLink would live on"""
enum SupplierQuickLinkType {
  SUPPLIERPRODUCT
  SUPPLIERVARIANT
}

"""
The required input fields to partially update an existing SupplierQuickLink
            
You must be calling from the pertaining app's AppClient
"""
input SupplierQuickLinkUpdateInput {
  """The Id of the App this quicklink pertains to."""
  appId: ID!

  """
  This can have dynamic parts, using [supplierProductId] format. It represents where the link goes.
  """
  dynamicUrl: String

  """What the text for the link should be to the user."""
  label: String

  """Indicates which page the SupplierQuickLink would live on"""
  quickLinkType: SupplierQuickLinkType!

  """
  The Id of the Supplier this quicklink pertains to (the one that has installed your app).
  """
  supplierId: ID!
}

"""Indication of whether the Supplier is live and accepting orders"""
enum SupplierStatus {
  """Indicates a Supplier's goods are no longer available for retailing."""
  ARCHIVED

  """
  Indicates that a Supplier's goods are not yet available for retailing. Functionally identical to ARCHIVED.
  """
  DRAFT

  """
  Indicates that a Supplier is activated and available, but not in the public Supplier Marketplace.
  """
  PRIVATE

  """
  Indicates that a Supplier is not only activated, but available in the public Supplier Marketplace.
  """
  PUBLIC
}

"""The possible fields in order to update a supplier."""
input SupplierUpdateInput {
  """Indicates the vertical the majority of a Supplier's goods are in."""
  category: SupplierCategory
  description: String

  """
  The approximate number of in stock products this Supplier has on a typical basis.
  """
  inStockProducts: Int
  name: String

  """
  These users will get notified if something requires attention for this Supplier.
  If none are provided, ownerUserName will be notified.
  """
  notificationUserNames: SupplierNotificationUserNamesInput
  ownerUserName: String

  """The address where this Supplier's goods ship from."""
  shipFromAddress: AddressInput
  status: SupplierStatus
  supplierId: ID!

  """
  The top Brands or Vendors this Supplier carries, limit 5 and 256 characters each.
  """
  topVendors: [String!]
}

"""
The main item of the Supplier Domain, represents a single SKU of a product
Only the variant level exists, there is no parent product.
"""
type SupplierVariant {
  """Associates contentItems with this variant"""
  contentItemIds: [ID]
  createdAt: String!

  """Get the associated SupplierVariantCustomData"""
  customData: SupplierVariantCustomData
  externalVariantId: String!

  """
  Get the featured image for a supplierVariant
  
  Requires the supplierproductcontentitem/read permission on the associated Supplier.
  
  This is a convenience field that returns the first content item with the type
  IMAGE, if exists for the associated supplierProduct.
  """
  featuredImage: SupplierProductContentItem
  inventoryPolicy: SupplierVariantInventoryPolicy!
  inventoryQuantity: Int!

  """Get the inventory status of this variant"""
  inventoryStatus: VariantInventoryStatus

  """
  An array of the option values that make up this variant.
  For example, a product with a color and size option would have two option values,
  one for each of the color and size options, i.e. ["Red", "Small"]
  Must have 1-3, and it should match the number of options in the product, but there is no validation to do so.
  Set this to "No Option" if you don't want to use options for this product and this is the only variant.
  See https://docs.buildresonance.com/concepts/products/#no-option-products for more info.
  """
  optionValues: [String!]!

  """
  Get the supplierVariantSupplement for a supplierVariant
  
  Requires suppliervariantsupplement/read permission on the requesting identity
  """
  supplement: SupplierVariantSupplement
  supplierId: ID!
  supplierProductId: ID!
  supplierVariantId: ID!

  """Get the title of this variant (combo of optionValues)"""
  title: String!
  updatedAt: String!
  updatedBy: String!
}

"""
A flattended supplierVariant with an optional supplement to match the inputs and avoid clashes with subresolvers.
"""
type SupplierVariantComposite {
  supplierVariant: SupplierVariant!
  supplierVariantSupplement: SupplierVariantSupplement
}

"""
The necessary fields in order to create a new supplierVariant and supplierVariantSupplement.
"""
input SupplierVariantCompositeCreateInput {
  supplierVariantInput: SupplierVariantCreateInput!
  supplierVariantSupplementInput: SupplierVariantSupplementInCompositeCreateInput
}

"""
The necessary fields to create a SupplierVariant and optional Supplement as part of a SupplierProductComposite
"""
input SupplierVariantCompositeInCompositeCreateInput {
  supplierVariantInput: SupplierVariantInCompositeCreateInput
  supplierVariantSupplementInput: SupplierVariantSupplementInCompositeCreateInput
}

"""Paginate through SupplierVariants"""
type SupplierVariantConnection {
  edges: [SupplierVariantEdge]!
  nodes: [SupplierVariant]!
  pageInfo: PageInfo!
}

"""The necessary fields in order to create a new supplierVariant"""
input SupplierVariantCreateInput {
  """Associates contentItems with this variant"""
  contentItemIds: [ID]
  externalVariantId: String!
  inventoryPolicy: SupplierVariantInventoryPolicy!
  inventoryQuantity: Int!

  """
  An array of the option values that make up this variant.
  For example, a product with a color and size option would have two option values,
  one for each of the color and size options, i.e. ["Red", "Small"]
  Must have 1-3, and it should match the number of options in the product, but there is no validation to do so.
  Set this to "No Option" if you don't want to use options for this product and this is the only variant.
  See https://docs.buildresonance.com/concepts/products/#no-option-products for more info.
  """
  optionValues: [String!]!
  supplierId: ID!
  supplierProductId: ID!
}

"""
Data that doesn't fit in the provided SupplierVariant fields needs to live here.
"""
type SupplierVariantCustomData {
  createdAt: String!
  data: JSON!
  supplierId: ID!
  supplierVariantId: ID!
  updatedAt: String!
  updatedBy: String!
}

"""
The input type to upsert SupplierVariantCustomData.
The data object is required, but is a partial update, and keys not mentioned will be left alone.
"""
input SupplierVariantCustomDataUpsertInput {
  data: JSON!
  supplierId: ID!
  supplierVariantId: ID!
}

"""Response for when deleting a supplierVariant"""
type SupplierVariantDeleteResponse {
  deletedId: ID!
}

"""One edge producing one SupplierVariant Node"""
type SupplierVariantEdge {
  node: SupplierVariant
}

"""
The necessary fields in order to update an existing supplierVariant using an externalVariantId
"""
input SupplierVariantExternalUpdateInput {
  """Associates contentItems with this variant"""
  contentItemIds: [ID]
  externalVariantId: String!
  inventoryPolicy: SupplierVariantInventoryPolicy
  inventoryQuantity: Int

  """
  An array of the option values that make up this variant.
  For example, a product with a color and size option would have two option values,
  one for each of the color and size options, i.e. ["Red", "Small"]
  Must have 1-3, and it should match the number of options in the product, but there is no validation to do so.
  Set this to "No Option" if you don't want to use options for this product and this is the only variant.
  See https://docs.buildresonance.com/concepts/products/#no-option-products for more info.
  """
  optionValues: [String!]
  supplierId: ID!
}

"""Object to indicate both amount and unit of handling cost."""
type SupplierVariantHandlingCost {
  amount: Float!
  unit: SupplierVariantHandlingCostUnit!
}

"""Input object to indicate both amount and unit of handling cost."""
input SupplierVariantHandlingCostInput {
  amount: Float!
  unit: SupplierVariantHandlingCostUnit!
}

"""Indicates what unit the amount is in"""
enum SupplierVariantHandlingCostUnit {
  """The amount is in a currency, i.e. $"""
  CURRENCY

  """The amount is a percentage of the Cost field"""
  PERCENTAGE_OF_COST
}

"""
The necessary fields in order to create a new supplierVariant inside a SupplierProductCompositeCreateInput
"""
input SupplierVariantInCompositeCreateInput {
  """
  For contentItems where you are associating an existing contentItem, input the actual contentItemId.
  For other contentItem Inputs, match this to the contentItemInputId you have assigned.
  """
  contentItemInputIds: [String!]
  externalVariantId: String!
  inventoryPolicy: SupplierVariantInventoryPolicy!
  inventoryQuantity: Int!

  """
  An array of the option values that make up this variant.
  For example, a product with a color and size option would have two option values,
  one for each of the color and size options, i.e. ["Red", "Small"]
  Must have 1-3, and it should match the number of options in the product, but there is no validation to do so.
  Set this to "No Option" if you don't want to use options for this product and this is the only variant.
  See https://docs.buildresonance.com/concepts/products/#no-option-products for more info.
  """
  optionValues: [String!]!
}

"""
Indicates how to handle inventory, whether a product should or can go out of stock
"""
enum SupplierVariantInventoryPolicy {
  BOTTOMLESS
  DEFAULT
  HOLD
}

"""Metric or Standard Dimension?"""
enum SupplierVariantShippingDimensionUnit {
  CM
  IN
}

"""Object to indicate all three shipping box dimensions and a unit"""
type SupplierVariantShippingDimensions {
  height: Float!
  length: Float!
  unit: SupplierVariantShippingDimensionUnit!
  width: Float!
}

"""Input object to indicate all three shipping box dimensions and a unit"""
input SupplierVariantShippingDimensionsInput {
  height: Float!
  length: Float!
  unit: SupplierVariantShippingDimensionUnit!
  width: Float!
}

"""
This has a one to one relationship with SupplierVariant, and provides supplemental data for the SupplierVariant.
These items get updated at a lower frequency, and are therefore separate.
"""
type SupplierVariantSupplement {
  """
  A calculated metric for some kind of average for a common region. Uncommon.
  """
  averageShippingCost: Float

  """UPC, ISBN, GTIN, etc"""
  barcode: String

  """Quantity in one variant (i.e. 12-pack)"""
  casePack: Int

  """COGS, or Cost of Goods Sold, in a currency"""
  cost: Float

  """ISO Date"""
  createdAt: String!

  """Additional warehouse handling charge, typically for larger items."""
  handlingCost: SupplierVariantHandlingCost

  """
  Calculated field, giving the handling cost as Currency no matter how it is stored
  """
  handlingCostAsCurrency: Float
  isTaxable: Boolean

  """Often same as vendor, but not always."""
  manufacturer: String

  """Minimum Advertised Price"""
  mapPrice: Float

  """Manufacturer Part Number"""
  mpn: String

  """Manufacturer's Suggested Retail Price"""
  msrp: Float
  productTags: [String]

  """AKA Price"""
  recommendedPrice: Float
  shippingDimensions: SupplierVariantShippingDimensions

  """Stock Keeping Unit"""
  sku: String
  standardizedColor: VariantStandardizedColor
  supplierId: ID!
  supplierProductId: ID!
  supplierVariantId: ID!

  """ISO Date"""
  updatedAt: String!
  updatedBy: String!
  weight: SupplierVariantWeight
}

"""
The necessary fields in order to create a new supplierVariantSupplement
"""
input SupplierVariantSupplementCreateInput {
  """
  A calculated metric for some kind of average for a common region. Uncommon.
  """
  averageShippingCost: Float

  """UPC, ISBN, GTIN, etc"""
  barcode: String

  """Quantity in one variant (i.e. 12-pack)"""
  casePack: Int

  """COGS, or Cost of Goods Sold, in a currency"""
  cost: Float

  """Additional warehouse handling charge, typically for larger items."""
  handlingCost: SupplierVariantHandlingCostInput
  isTaxable: Boolean

  """Often same as vendor, but not always."""
  manufacturer: String

  """Minimum Advertised Price"""
  mapPrice: Float

  """Manufacturer Part Number"""
  mpn: String

  """Manufacturer's Suggested Retail Price"""
  msrp: Float

  """AKA Price"""
  recommendedPrice: Float
  shippingDimensions: SupplierVariantShippingDimensionsInput

  """Stock Keeping Unit"""
  sku: String
  standardizedColor: VariantStandardizedColor
  supplierId: ID!
  supplierProductId: ID!
  supplierVariantId: ID!
  weight: SupplierVariantWeightInput
}

"""
The necessary fields in order to create a new supplierVariantSupplement in the midst of a Composite.
It is the same as the normal input, but with no supplierVariantId.
"""
input SupplierVariantSupplementInCompositeCreateInput {
  """
  A calculated metric for some kind of average for a common region. Uncommon.
  """
  averageShippingCost: Float

  """UPC, ISBN, GTIN, etc"""
  barcode: String

  """Quantity in one variant (i.e. 12-pack)"""
  casePack: Int

  """COGS, or Cost of Goods Sold, in a currency"""
  cost: Float

  """Additional warehouse handling charge, typically for larger items."""
  handlingCost: SupplierVariantHandlingCostInput
  isTaxable: Boolean

  """Often same as vendor, but not always."""
  manufacturer: String

  """Minimum Advertised Price"""
  mapPrice: Float

  """Manufacturer Part Number"""
  mpn: String

  """Manufacturer's Suggested Retail Price"""
  msrp: Float

  """AKA Price"""
  recommendedPrice: Float
  shippingDimensions: SupplierVariantShippingDimensionsInput

  """Stock Keeping Unit"""
  sku: String
  standardizedColor: VariantStandardizedColor
  weight: SupplierVariantWeightInput
}

"""
The necessary fields in order to update a supplierVariantSupplement.
ID fields required, all other fields optional, only included fields will be updated.
"""
input SupplierVariantSupplementUpdateInput {
  """
  A calculated metric for some kind of average for a common region. Uncommon.
  """
  averageShippingCost: Float

  """UPC, ISBN, GTIN, etc"""
  barcode: String

  """Quantity in one variant (i.e. 12-pack)"""
  casePack: Int

  """COGS, or Cost of Goods Sold, in a currency"""
  cost: Float

  """Additional warehouse handling charge, typically for larger items."""
  handlingCost: SupplierVariantHandlingCostInput
  isTaxable: Boolean

  """Often same as vendor, but not always."""
  manufacturer: String

  """Minimum Advertised Price"""
  mapPrice: Float

  """Manufacturer Part Number"""
  mpn: String

  """Manufacturer's Suggested Retail Price"""
  msrp: Float

  """AKA Price"""
  recommendedPrice: Float
  shippingDimensions: SupplierVariantShippingDimensionsInput

  """Stock Keeping Unit"""
  sku: String
  standardizedColor: VariantStandardizedColor
  supplierVariantId: ID!
  weight: SupplierVariantWeightInput
}

"""The necessary fields in order to update an existing supplierVariant"""
input SupplierVariantUpdateInput {
  """Associates contentItems with this variant"""
  contentItemIds: [ID]
  externalVariantId: String
  inventoryPolicy: SupplierVariantInventoryPolicy
  inventoryQuantity: Int

  """
  An array of the option values that make up this variant.
  For example, a product with a color and size option would have two option values,
  one for each of the color and size options, i.e. ["Red", "Small"]
  Must have 1-3, and it should match the number of options in the product, but there is no validation to do so.
  Set this to "No Option" if you don't want to use options for this product and this is the only variant.
  See https://docs.buildresonance.com/concepts/products/#no-option-products for more info.
  """
  optionValues: [String!]
  supplierVariantId: ID!
}

"""Object to indicate both amount and unit of weight."""
type SupplierVariantWeight {
  amount: Float!
  unit: SupplierVariantWeightUnit!
}

"""Input object to indicate both amount and unit of weight."""
input SupplierVariantWeightInput {
  amount: Float!
  unit: SupplierVariantWeightUnit!
}

"""Metric or Standard Weight?"""
enum SupplierVariantWeightUnit {
  GRAMS
  LBS
}

"""Indicates what stage a Supply Entity is in."""
enum SupplyEntityStatus {
  ARCHIVED
  DRAFT
  NEEDSREVIEW
  PUBLISHED
}

"""Filter Supply Entities using Status."""
input SupplyEntityStatusFilterInput {
  operator: FilterOperator
  values: [SupplyEntityStatus!]!
}

"""
Contains before and after snapshots for every event that occurs within the Supply domain
"""
type SupplyEvent {
  """
  This is the event data and metadata.
  The data is variable, but most typically contains a newItem and oldItem.
  """
  message: SupplyEventMessage

  """UUID"""
  messageId: String!

  """A human-friendly string summarizing the event"""
  subject: String

  """ISO Date that the event occurred"""
  timestamp: Date!
}

"""Paginate through SupplyEvents"""
type SupplyEventConnection {
  edges: [SupplyEventEdge]!
  nodes: [SupplyEvent]!
  pageInfo: PageInfo!
}

"""One edge producing one SupplyEvent Node"""
type SupplyEventEdge {
  node: SupplyEvent
}

"""
This is the event data and metadata.
The data is variable, but most typically contains a newItem and oldItem.
"""
type SupplyEventMessage {
  """Variable, but most typically contains a newItem and oldItem."""
  data: JSON

  """Items consistent to every event"""
  metadata: SupplyEventMetadata
}

"""Items consistent to every event"""
type SupplyEventMetadata {
  domain: String!

  """This is most typically domainHqId or supplierId"""
  domainEntityId: ID!
  entityId: ID
  identityId: ID
  itemType: String
  mutationType: String
  status: String
  syncedAt: Int
  updatedBy: String
}

"""What type of event to listen for."""
enum SupplyEventMutationType {
  CREATED
  DELETED
  UPDATED
}

"""The protocol to use to supply the event."""
enum SupplyEventProtocol {
  """
  For internal use only. Permissions are difficult to setup for this protocol.
  """
  LAMBDA
}

"""Entity representing a subscription to supply events."""
type SupplyEventSubscription {
  createdAt: String!

  """Changes based on protocol, but indicates the exact target."""
  endpoint: String!
  eventSubscriptionId: ID!

  """The SupplyEntity to subscribe to, all lowercase."""
  itemType: String!

  """What type of event to listen for."""
  mutationType: SupplyEventMutationType!

  """The protocol to use to supply the event."""
  protocol: SupplyEventProtocol!

  """
  This is the "main" entity that is being subscribed to.
  This can either be a ResonanceDomainEntityId (SupplierId, DemandHqId) to subscribe to an entity to which they have access.
  This is useful to monitor things like changes to Products and such.
  Or an Identity (AppClientId, UserName) to subscribe to THEMSELF.
  This is useful to monitor things like app installations, uninstallations, and such.
  subscriptionEntityType indicates what type of entity this is.
  """
  subscriptionEntityId: ID!

  """This distinguishes between the types of subscriptions."""
  subscriptionEntityType: SupplyEventSubscriptionEntityType!

  """The app (not appClient) or user that owns the subscription."""
  subscriptionOwnerId: ID!
  updatedAt: String!
  updatedBy: ID!
}

"""Paginate through SupplyEventSubscriptions"""
type SupplyEventSubscriptionConnection {
  edges: [SupplyEventSubscriptionEdge]!
  nodes: [SupplyEventSubscription]!
  pageInfo: PageInfo!
}

"""The fields required to create an event subscription."""
input SupplyEventSubscriptionCreateInput {
  """Changes based on protocol, but indicates the exact target."""
  endpoint: String!

  """The SupplyEntity to subscribe to, all lowercase."""
  itemType: String!

  """What type of event to listen for."""
  mutationType: SupplyEventMutationType!

  """The protocol to use to supply the event."""
  protocol: SupplyEventProtocol!

  """
  This is the "main" entity that is being subscribed to.
  This can either be a ResonanceDomainEntityId (SupplierId, DemandHqId) to subscribe to an entity to which they have access.
  This is useful to monitor things like changes to Products and such.
  Or an Identity (AppClientId, UserName) to subscribe to THEMSELF.
  This is useful to monitor things like app installations, uninstallations, and such.
  subscriptionEntityType indicates what type of entity this is.
  """
  subscriptionEntityId: ID!

  """This distinguishes between the types of subscriptions."""
  subscriptionEntityType: SupplyEventSubscriptionEntityType!

  """The app (not appClient) or user that owns the subscription."""
  subscriptionOwnerId: ID!
}

"""
The response when the deleteSupplyEventSubscription mutation is called.
"""
type SupplyEventSubscriptionDeleteResponse {
  deletedId: ID!
}

"""A SupplyEventSubscription edge used for pagination."""
type SupplyEventSubscriptionEdge {
  node: SupplyEventSubscription!
}

"""This distinguishes between the types of subscriptions."""
enum SupplyEventSubscriptionEntityType {
  DOMAINENTITY
  IDENTITY
}

"""
Indicates the key of the term aggregation, and approximately how many documents it occurs in. 
"""
type TermAggregation {
  docCount: Int!
  key: String!
}

"""Indicates whether a variant is in or out of stock"""
enum VariantInventoryStatus {
  INSTOCK
  OUTOFSTOCK
}

"""Indicates a standardized color for a variant, i.e. Blue for 'Topaz'"""
enum VariantStandardizedColor {
  BEIGE
  BLACK
  BLUE
  BRONZE
  BROWN
  CLEAR
  GOLD
  GRAY
  GREEN
  MULTICOLOR
  OFFWHITE
  ORANGE
  PINK
  PURPLE
  RED
  SILVER
  WHITE
  YELLOW
}