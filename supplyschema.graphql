"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

"""The root mutation type for the Supply domain"""
type Mutation {
  """Nothing to see here, just a workaround for Apollo Server"""
  _makeEmpty(id: String): String

  """Create a new supplier"""
  createSupplier(input: SupplierCreateInput!): Supplier
}

type PageInfo {
  """The cursor to use when paginating forwards."""
  endCursor: String

  """The cursor to use when paginating backwards."""
  startCursor: String
}

"""
The full notification object. Endpoint may vary based on type, but is always a string (url, email,etc).
"""
type PurchaseOrderNotification {
  type: PurchaseOrderNotificationType!
  endpoint: String!
}

"""Exactly like PurchaseOrderNotification"""
input PurchaseOrderNotificationInput {
  type: PurchaseOrderNotificationType!
  endpoint: String!
}

"""Used to determine how a supplier recieves Purchase Orders"""
enum PurchaseOrderNotificationType {
  WEBHOOK
}

"""The root query type for the Supply domain"""
type Query {
  """Nothing to see here, just a workaround for Apollo Server"""
  _empty: String

  """Get a single supplier by SupplierId"""
  supplier(supplierId: ID!): Supplier

  """Get a list of suppliers"""
  suppliers(
    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): SupplierConnection!
}

"""Used throughout the app to give a currency to price information"""
enum ResonanceCurrency {
  USD
}

"""
Used throughout the app to indicate what language and locality a given text is in
"""
enum ResonanceLocale {
  EN_US
}

type Supplier {
  supplierId: ID!
  name: String!
  description: String
  ownerUserName: String!
  defaultLocale: ResonanceLocale!
  defaultCurrency: ResonanceCurrency!
  purchaseOrderNotification: PurchaseOrderNotification!
  status: SupplierStatus!
  createdAt: String!
  updatedAt: String!
}

type SupplierConnection {
  edges: [SupplierEdge]
  nodes: [Supplier]
  pageInfo: PageInfo!
}

"""The necessary fields in order to create a new supplier"""
input SupplierCreateInput {
  name: String!
  description: String
  defaultLocale: ResonanceLocale!
  defaultCurrency: String!
  purchaseOrderNotification: PurchaseOrderNotificationInput!
}

type SupplierEdge {
  node: Supplier
}

"""Indication of whether the Supplier is live and accepting orders"""
enum SupplierStatus {
  ACTIVE
  ARCHIVED
}

